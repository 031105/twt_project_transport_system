{"ast":null,"code":"// Mock data for Transport Booking System - Student Project\n\nimport { addDays, format } from 'date-fns';\n\n// Helper function to generate UUIDs for mock data\nconst generateId = () => Math.random().toString(36).substr(2, 9);\n\n// Enhanced locations with coordinates for better mapping\nexport const mockLocations = [{\n  id: 'loc-1',\n  name: 'KL Sentral Terminal',\n  city: 'Kuala Lumpur',\n  state: 'Federal Territory',\n  country: 'Malaysia',\n  coordinates: [3.1390, 101.6869],\n  address: 'KL Sentral, 50470 Kuala Lumpur'\n}, {\n  id: 'loc-2',\n  name: 'Terminal Bersepadu Selatan',\n  city: 'Johor Bahru',\n  state: 'Johor',\n  country: 'Malaysia',\n  coordinates: [1.4854, 103.7618],\n  address: 'Jalan Tun Abdul Razak, 80000 Johor Bahru'\n}, {\n  id: 'loc-3',\n  name: 'Komtar Bus Terminal',\n  city: 'George Town',\n  state: 'Penang',\n  country: 'Malaysia',\n  coordinates: [5.4164, 100.3327],\n  address: 'Jalan Dr Lim Chwee Leong, 10000 George Town'\n}, {\n  id: 'loc-4',\n  name: 'Melaka Sentral',\n  city: 'Malacca City',\n  state: 'Malacca',\n  country: 'Malaysia',\n  coordinates: [2.1896, 102.2501],\n  address: 'Jalan Tun Razak, 75400 Melaka'\n}, {\n  id: 'loc-5',\n  name: 'Terminal Amanjaya',\n  city: 'Ipoh',\n  state: 'Perak',\n  country: 'Malaysia',\n  coordinates: [4.5975, 101.0901],\n  address: 'Jalan Ampang, 30200 Ipoh'\n}, {\n  id: 'loc-6',\n  name: 'Seremban Terminal',\n  city: 'Seremban',\n  state: 'Negeri Sembilan',\n  country: 'Malaysia',\n  coordinates: [2.7297, 101.9381],\n  address: 'Jalan Sungai Ujong, 70200 Seremban'\n}, {\n  id: 'loc-7',\n  name: 'Genting Skyway Terminal',\n  city: 'Genting Highlands',\n  state: 'Pahang',\n  country: 'Malaysia',\n  coordinates: [3.4213, 101.7936],\n  address: 'Genting Highlands Resort, 69000 Genting Highlands'\n}, {\n  id: 'loc-8',\n  name: 'Kuantan Terminal',\n  city: 'Kuantan',\n  state: 'Pahang',\n  country: 'Malaysia',\n  coordinates: [3.8077, 103.3260],\n  address: 'Jalan Stadium, 25000 Kuantan'\n}];\n\n// Mock vehicle types\nexport const mockVehicleTypes = [{\n  id: 'vt-1',\n  name: 'Standard Bus',\n  capacity: 45,\n  description: 'Regular bus with standard seating'\n}, {\n  id: 'vt-2',\n  name: 'Luxury Coach',\n  capacity: 30,\n  description: 'Premium bus with comfortable seating and amenities'\n}, {\n  id: 'vt-3',\n  name: 'Mini Van',\n  capacity: 12,\n  description: 'Small vehicle for shorter routes'\n}];\n\n// Mock vehicles\nexport const mockVehicles = [{\n  id: 'v-1',\n  plateNumber: 'TBS-001',\n  vehicleNumber: 'TBS-001',\n  vehicleTypeId: 'vt-1',\n  model: 'Mercedes OH1830',\n  year: 2022,\n  status: 'active',\n  capacity: 45,\n  mileage: 125000,\n  lastService: '2024-11-15'\n}, {\n  id: 'v-2',\n  plateNumber: 'TBS-002',\n  vehicleNumber: 'TBS-002',\n  vehicleTypeId: 'vt-2',\n  model: 'Scania K410IB',\n  year: 2023,\n  status: 'active',\n  capacity: 30,\n  mileage: 85000,\n  lastService: '2024-11-20'\n}, {\n  id: 'v-3',\n  plateNumber: 'TBS-003',\n  vehicleNumber: 'TBS-003',\n  vehicleTypeId: 'vt-3',\n  model: 'Toyota Hiace',\n  year: 2021,\n  status: 'active',\n  capacity: 12,\n  mileage: 95000,\n  lastService: '2024-11-10'\n}, {\n  id: 'v-4',\n  plateNumber: 'TBS-004',\n  vehicleNumber: 'TBS-004',\n  vehicleTypeId: 'vt-1',\n  model: 'Volvo B8R',\n  year: 2022,\n  status: 'active',\n  capacity: 45,\n  mileage: 110000,\n  lastService: '2024-11-25'\n}];\n\n// Mock routes with multiple intermediate stops\nexport const mockRoutes = [{\n  id: 'r-1',\n  name: 'KL - Johor Express',\n  originId: 'loc-1',\n  destinationId: 'loc-2',\n  basePrice: 45.00,\n  durationHours: 5,\n  distanceKm: 350,\n  isActive: true,\n  intermediateStops: [{\n    locationId: 'loc-6',\n    // Seremban\n    stopNumber: 1,\n    arrivalOffset: 60,\n    // 1 hour from start\n    departureOffset: 70,\n    // 10 minute stop\n    additionalPrice: 15.00,\n    distanceFromOrigin: 65\n  }, {\n    locationId: 'loc-4',\n    // Malacca\n    stopNumber: 2,\n    arrivalOffset: 120,\n    // 2 hours from start\n    departureOffset: 135,\n    // 15 minute stop\n    additionalPrice: 25.00,\n    distanceFromOrigin: 147\n  }],\n  operatingDays: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'],\n  frequency: 'daily',\n  estimatedFuelCost: 45.0,\n  tollCharges: 18.0,\n  averageSpeed: 70,\n  routeWaypoints: [[3.1390, 101.6869],\n  // KL Sentral\n  [3.0319, 101.7094],\n  // Cheras area\n  [2.9167, 101.7500],\n  // Nilai\n  [2.7297, 101.9381],\n  // Seremban\n  [2.3167, 102.0500],\n  // Rembau area\n  [2.1896, 102.2501] // Malacca\n  ]\n}, {\n  id: 'r-2',\n  name: 'KL - Penang Highway',\n  originId: 'loc-1',\n  destinationId: 'loc-3',\n  basePrice: 55.00,\n  durationHours: 4,\n  distanceKm: 365,\n  isActive: true,\n  intermediateStops: [{\n    locationId: 'loc-7',\n    // Genting (optional tourist stop)\n    stopNumber: 1,\n    arrivalOffset: 45,\n    departureOffset: 50,\n    // 5 minute stop\n    additionalPrice: 20.00,\n    distanceFromOrigin: 55\n  }, {\n    locationId: 'loc-5',\n    // Ipoh\n    stopNumber: 2,\n    arrivalOffset: 150,\n    departureOffset: 165,\n    // 15 minute stop\n    additionalPrice: 30.00,\n    distanceFromOrigin: 205\n  }],\n  operatingDays: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'],\n  frequency: 'daily',\n  estimatedFuelCost: 52.0,\n  tollCharges: 22.0,\n  averageSpeed: 75,\n  routeWaypoints: [[3.1390, 101.6869],\n  // KL Sentral\n  [3.2167, 101.7167],\n  // Gombak area\n  [3.4213, 101.7936],\n  // Genting (via Karak Highway)\n  [3.8000, 101.5333],\n  // Bentong area\n  [4.1167, 101.1500],\n  // Tapah area\n  [4.5975, 101.0901],\n  // Ipoh\n  [4.8500, 100.9333],\n  // Kuala Kangsar\n  [5.1167, 100.7500],\n  // Taiping area\n  [5.4164, 100.3327] // Penang\n  ]\n}, {\n  id: 'r-3',\n  name: 'KL - Malacca Direct',\n  originId: 'loc-1',\n  destinationId: 'loc-4',\n  basePrice: 25.00,\n  durationHours: 2,\n  distanceKm: 147,\n  isActive: true,\n  intermediateStops: [{\n    locationId: 'loc-6',\n    // Seremban\n    stopNumber: 1,\n    arrivalOffset: 60,\n    departureOffset: 65,\n    // 5 minute stop\n    additionalPrice: 15.00,\n    distanceFromOrigin: 65\n  }],\n  operatingDays: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'],\n  frequency: 'weekdays',\n  estimatedFuelCost: 20.0,\n  tollCharges: 8.0,\n  averageSpeed: 70,\n  routeWaypoints: [[3.1390, 101.6869],\n  // KL\n  [2.7297, 101.9381],\n  // Seremban\n  [2.1896, 102.2501] // Malacca\n  ]\n}, {\n  id: 'r-4',\n  name: 'Ipoh - Penang Express',\n  originId: 'loc-5',\n  destinationId: 'loc-3',\n  basePrice: 30.00,\n  durationHours: 2,\n  distanceKm: 125,\n  isActive: true,\n  intermediateStops: [],\n  operatingDays: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'],\n  frequency: 'daily',\n  estimatedFuelCost: 18.0,\n  tollCharges: 12.0,\n  averageSpeed: 65,\n  routeWaypoints: [[4.5975, 101.0901],\n  // Ipoh\n  [4.8500, 100.9333],\n  // Kuala Kangsar\n  [5.1167, 100.7500],\n  // Taiping area\n  [5.4164, 100.3327] // Penang\n  ]\n}, {\n  id: 'r-5',\n  name: 'KL - East Coast Express',\n  originId: 'loc-1',\n  destinationId: 'loc-8',\n  basePrice: 65.00,\n  durationHours: 4.5,\n  distanceKm: 280,\n  isActive: true,\n  intermediateStops: [{\n    locationId: 'loc-7',\n    // Genting\n    stopNumber: 1,\n    arrivalOffset: 50,\n    departureOffset: 60,\n    // 10 minute stop\n    additionalPrice: 20.00,\n    distanceFromOrigin: 55\n  }],\n  operatingDays: ['friday', 'saturday', 'sunday'],\n  frequency: 'weekend',\n  estimatedFuelCost: 38.0,\n  tollCharges: 15.0,\n  averageSpeed: 62,\n  routeWaypoints: [[3.1390, 101.6869],\n  // KL Sentral\n  [3.2167, 101.7167],\n  // Gombak area\n  [3.4213, 101.7936],\n  // Genting\n  [3.6500, 102.2500],\n  // Bentong\n  [3.7833, 102.9167],\n  // Temerloh area\n  [3.8077, 103.3260] // Kuantan\n  ]\n}];\n\n// Enhanced trip generation with occupation tracking\nexport const generateMockTrips = () => {\n  const trips = [];\n  const today = new Date();\n  for (let i = 0; i < 7; i++) {\n    const tripDate = addDays(today, i);\n\n    // Generate multiple trips per day for each route\n    mockRoutes.forEach((route, routeIndex) => {\n      const dayName = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'][tripDate.getDay()];\n      if (route.operatingDays.includes(dayName)) {\n        // Morning trip\n        const morningTrip = {\n          id: `trip-${route.id}-${i}-morning`,\n          routeId: route.id,\n          vehicleId: `v-${routeIndex + 1}`,\n          departureDatetime: new Date(tripDate.getFullYear(), tripDate.getMonth(), tripDate.getDate(), 7 + routeIndex, 0),\n          arrivalDatetime: new Date(tripDate.getFullYear(), tripDate.getMonth(), tripDate.getDate(), 7 + routeIndex + route.durationHours, 0),\n          totalSeats: 45,\n          availableSeats: Math.floor(Math.random() * 25) + 15,\n          // 15-40 available\n          status: 'scheduled'\n        };\n        trips.push(morningTrip);\n\n        // Afternoon trip (if it's a popular route)\n        if (routeIndex < 3) {\n          const afternoonTrip = {\n            id: `trip-${route.id}-${i}-afternoon`,\n            routeId: route.id,\n            vehicleId: `v-${routeIndex + 2}`,\n            departureDatetime: new Date(tripDate.getFullYear(), tripDate.getMonth(), tripDate.getDate(), 14 + routeIndex, 0),\n            arrivalDatetime: new Date(tripDate.getFullYear(), tripDate.getMonth(), tripDate.getDate(), 14 + routeIndex + route.durationHours, 0),\n            totalSeats: 45,\n            availableSeats: Math.floor(Math.random() * 30) + 10,\n            // 10-40 available\n            status: 'scheduled'\n          };\n          trips.push(afternoonTrip);\n        }\n      }\n    });\n  }\n  return trips;\n};\n\n// Mock seats generation\nexport const generateMockSeats = (tripId, capacity, basePrice) => {\n  const seats = [];\n  const seatsPerRow = 4;\n  const rows = Math.ceil(capacity / seatsPerRow);\n  for (let row = 1; row <= rows; row++) {\n    for (const col of ['A', 'B', 'C', 'D']) {\n      if (seats.length >= capacity) break;\n      seats.push({\n        id: `seat-${tripId}-${row}${col}`,\n        tripId: tripId,\n        seatNumber: `${row}${col}`,\n        price: basePrice,\n        isAvailable: Math.random() > 0.1 // 90% available\n      });\n    }\n  }\n  return seats;\n};\n\n// Mock users\nexport const mockUsers = [{\n  id: 'user-admin',\n  email: 'admin@transportbooking.com',\n  firstName: 'Admin',\n  lastName: 'User',\n  phone: '+60123456789',\n  role: 'admin',\n  isActive: true\n}, {\n  id: 'user-1',\n  email: 'john.doe@email.com',\n  firstName: 'John',\n  lastName: 'Doe',\n  phone: '+60187654321',\n  role: 'user',\n  isActive: true\n}, {\n  id: 'user-2',\n  email: 'jane.smith@email.com',\n  firstName: 'Jane',\n  lastName: 'Smith',\n  phone: '+60198765432',\n  role: 'user',\n  isActive: true\n}];\n\n// Mock bookings\nexport const mockBookings = [{\n  id: 'booking-1',\n  bookingReference: 'TBS20240115001',\n  userId: 'user-1',\n  tripId: 'trip-r-1-1-morning',\n  seatId: 'seat-trip-r-1-1-morning-1A',\n  passengerName: 'John Doe',\n  passengerPhone: '+60187654321',\n  passengerEmail: 'john.doe@email.com',\n  totalAmount: 45.00,\n  bookingStatus: 'confirmed',\n  paymentStatus: 'paid',\n  bookingDate: new Date(),\n  travelDate: addDays(new Date(), 1)\n}, {\n  id: 'booking-2',\n  bookingReference: 'TBS20240115002',\n  userId: 'user-2',\n  tripId: 'trip-r-2-2-afternoon',\n  seatId: 'seat-trip-r-2-2-afternoon-2A',\n  passengerName: 'Jane Smith',\n  passengerPhone: '+60198765432',\n  passengerEmail: 'jane.smith@email.com',\n  totalAmount: 55.00,\n  bookingStatus: 'pending',\n  paymentStatus: 'pending',\n  bookingDate: new Date(),\n  travelDate: addDays(new Date(), 2)\n}];\n\n// Mock payments\nexport const mockPayments = [{\n  id: 'payment-1',\n  bookingId: 'booking-1',\n  amount: 45.00,\n  paymentMethod: 'credit_card',\n  mockTransactionId: 'MOCK_TXN_20240115_123456',\n  cardLastFour: '1111',\n  status: 'completed',\n  processedAt: new Date()\n}];\n\n// Helper functions for mock API\nexport const mockApi = {\n  // Search trips\n  searchTrips: async ({\n    origin,\n    destination,\n    date\n  }) => {\n    await new Promise(resolve => setTimeout(resolve, 800)); // Simulate API delay\n\n    const trips = generateMockTrips();\n    const searchDate = new Date(date);\n    return trips.filter(trip => {\n      const route = mockRoutes.find(r => r.id === trip.routeId);\n      const tripDate = trip.departureDatetime;\n      return route && route.originId === origin && route.destinationId === destination && tripDate.toDateString() === searchDate.toDateString();\n    }).map(trip => {\n      const route = mockRoutes.find(r => r.id === trip.routeId);\n      const vehicle = mockVehicles.find(v => v.id === trip.vehicleId);\n      const vehicleType = vehicle ? mockVehicleTypes.find(vt => vt.id === vehicle.vehicleTypeId) : null;\n      const originLocation = mockLocations.find(l => l.id === (route === null || route === void 0 ? void 0 : route.originId));\n      const destinationLocation = mockLocations.find(l => l.id === (route === null || route === void 0 ? void 0 : route.destinationId));\n      return {\n        ...trip,\n        route,\n        vehicle,\n        vehicleType,\n        originLocation,\n        destinationLocation\n      };\n    });\n  },\n  // Get all trips\n  getAllTrips: async () => {\n    await new Promise(resolve => setTimeout(resolve, 600)); // Simulate API delay\n\n    const trips = generateMockTrips();\n    return trips.map(trip => {\n      const route = mockRoutes.find(r => r.id === trip.routeId);\n      const vehicle = mockVehicles.find(v => v.id === trip.vehicleId);\n      const vehicleType = vehicle ? mockVehicleTypes.find(vt => vt.id === vehicle.vehicleTypeId) : null;\n      const originLocation = mockLocations.find(l => l.id === (route === null || route === void 0 ? void 0 : route.originId));\n      const destinationLocation = mockLocations.find(l => l.id === (route === null || route === void 0 ? void 0 : route.destinationId));\n      return {\n        ...trip,\n        route,\n        vehicle,\n        vehicleType,\n        originLocation,\n        destinationLocation\n      };\n    }).sort((a, b) => a.departureDatetime - b.departureDatetime); // Sort by departure time\n  },\n  // Get trip details with seats\n  getTripDetails: async tripId => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const trips = generateMockTrips();\n    const trip = trips.find(t => t.id === tripId);\n    if (!trip) throw new Error('Trip not found');\n    const route = mockRoutes.find(r => r.id === trip.routeId);\n    const seats = generateMockSeats(tripId, trip.totalSeats, route.basePrice);\n    return {\n      ...trip,\n      route,\n      seats\n    };\n  },\n  // Create booking\n  createBooking: async bookingData => {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const newBooking = {\n      id: generateId(),\n      bookingReference: `TBS${format(new Date(), 'yyyyMMdd')}${Math.floor(Math.random() * 900) + 100}`,\n      ...bookingData,\n      bookingStatus: 'pending',\n      paymentStatus: 'pending',\n      bookingDate: new Date()\n    };\n    return newBooking;\n  },\n  // Process payment\n  processPayment: async paymentData => {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    // Simulate payment success/failure\n    const isSuccess = Math.random() > 0.1; // 90% success rate\n\n    const payment = {\n      id: generateId(),\n      mockTransactionId: `MOCK_TXN_${format(new Date(), 'yyyyMMdd')}_${Math.floor(Math.random() * 1000000)}`,\n      status: isSuccess ? 'completed' : 'failed',\n      failureReason: isSuccess ? null : 'Insufficient funds',\n      processedAt: new Date(),\n      ...paymentData\n    };\n    return payment;\n  },\n  // Get user bookings\n  getUserBookings: async userId => {\n    await new Promise(resolve => setTimeout(resolve, 600));\n    return mockBookings.filter(booking => booking.userId === userId).map(booking => {\n      const trips = generateMockTrips();\n      const trip = trips.find(t => t.id === booking.tripId);\n      const route = mockRoutes.find(r => r.id === (trip === null || trip === void 0 ? void 0 : trip.routeId));\n      const originLocation = mockLocations.find(l => l.id === (route === null || route === void 0 ? void 0 : route.originId));\n      const destinationLocation = mockLocations.find(l => l.id === (route === null || route === void 0 ? void 0 : route.destinationId));\n      return {\n        ...booking,\n        trip: {\n          ...trip,\n          route,\n          originLocation,\n          destinationLocation\n        }\n      };\n    });\n  }\n};\n\n// Analytics mock data\nexport const mockAnalytics = {\n  totalBookings: 1247,\n  totalRevenue: 67890.50,\n  activeTrips: 24,\n  totalUsers: 892,\n  monthlyData: [{\n    month: 'Jan',\n    bookings: 98,\n    revenue: 4567.80\n  }, {\n    month: 'Feb',\n    bookings: 112,\n    revenue: 5234.90\n  }, {\n    month: 'Mar',\n    bookings: 89,\n    revenue: 4123.45\n  }, {\n    month: 'Apr',\n    bookings: 134,\n    revenue: 6789.12\n  }, {\n    month: 'May',\n    bookings: 156,\n    revenue: 7890.34\n  }, {\n    month: 'Jun',\n    bookings: 178,\n    revenue: 8456.78\n  }],\n  popularRoutes: [{\n    route: 'KL - Johor Express',\n    bookings: 234\n  }, {\n    route: 'KL - Penang Highway',\n    bookings: 198\n  }, {\n    route: 'KL - Malacca Direct',\n    bookings: 156\n  }, {\n    route: 'Ipoh - Penang Express',\n    bookings: 89\n  }]\n};\n\n// Enhanced trip calculation with real-time pricing algorithm\nexport const calculateDynamicPrice = (route, date, availableSeats, totalSeats) => {\n  const basePrice = route.basePrice;\n  let dynamicPrice = basePrice;\n\n  // Date-based pricing\n  const dayOfWeek = date.getDay();\n  const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;\n  const isHoliday = false; // Could be enhanced with holiday calendar\n\n  if (isWeekend) {\n    dynamicPrice *= 1.15; // 15% weekend surcharge\n  }\n  if (isHoliday) {\n    dynamicPrice *= 1.25; // 25% holiday surcharge\n  }\n\n  // Demand-based pricing\n  const occupancyRate = 1 - availableSeats / totalSeats;\n  if (occupancyRate > 0.8) {\n    dynamicPrice *= 1.20; // 20% high demand surcharge\n  } else if (occupancyRate > 0.6) {\n    dynamicPrice *= 1.10; // 10% moderate demand surcharge\n  } else if (occupancyRate < 0.3) {\n    dynamicPrice *= 0.90; // 10% low demand discount\n  }\n\n  // Time-based pricing (advance booking discount)\n  const now = new Date();\n  const daysAdvance = Math.ceil((date - now) / (1000 * 60 * 60 * 24));\n  if (daysAdvance > 14) {\n    dynamicPrice *= 0.85; // 15% early bird discount\n  } else if (daysAdvance < 2) {\n    dynamicPrice *= 1.30; // 30% last minute surcharge\n  }\n\n  // Add operational costs\n  const operationalCost = route.estimatedFuelCost + route.tollCharges;\n  const profitMargin = 0.25; // 25% profit margin\n  const minPrice = operationalCost * (1 + profitMargin);\n  return Math.max(dynamicPrice, minPrice);\n};\n\n// Enhanced travel time estimation\nexport const calculateTravelTime = (route, trafficFactor = 1.0, weatherConditions = 'clear') => {\n  let baseTravelTime = route.distanceKm / route.averageSpeed; // hours\n\n  // Traffic adjustment\n  baseTravelTime *= trafficFactor;\n\n  // Weather adjustment\n  const weatherMultipliers = {\n    'clear': 1.0,\n    'light_rain': 1.15,\n    'heavy_rain': 1.35,\n    'fog': 1.25,\n    'storm': 1.50\n  };\n  baseTravelTime *= weatherMultipliers[weatherConditions] || 1.0;\n\n  // Add stop times\n  const stopTime = route.intermediateStops.reduce((total, stop) => {\n    return total + (stop.departureOffset - stop.arrivalOffset);\n  }, 0) / 60; // convert minutes to hours\n\n  return baseTravelTime + stopTime;\n};\n\n// Enhanced CO2 calculation for environmental impact\nexport const calculateCO2Emissions = (route, vehicleType) => {\n  const emissionFactors = {\n    'vt-1': 0.68,\n    // Standard Bus kg CO2 per km\n    'vt-2': 0.85,\n    // Luxury Coach (heavier, more emissions)\n    'vt-3': 0.45 // Mini Van (smaller, less emissions)\n  };\n  const factor = emissionFactors[vehicleType] || 0.68;\n  return route.distanceKm * factor;\n};\n\n// Utility functions for trip calculations\nexport const calculateCurrentOccupancy = trip => {\n  return trip.totalSeats - trip.availableSeats;\n};\nexport const calculateOccupancyRate = trip => {\n  const occupancyRate = (trip.totalSeats - trip.availableSeats) / trip.totalSeats * 100;\n  return parseFloat(occupancyRate.toFixed(1));\n};","map":{"version":3,"names":["addDays","format","generateId","Math","random","toString","substr","mockLocations","id","name","city","state","country","coordinates","address","mockVehicleTypes","capacity","description","mockVehicles","plateNumber","vehicleNumber","vehicleTypeId","model","year","status","mileage","lastService","mockRoutes","originId","destinationId","basePrice","durationHours","distanceKm","isActive","intermediateStops","locationId","stopNumber","arrivalOffset","departureOffset","additionalPrice","distanceFromOrigin","operatingDays","frequency","estimatedFuelCost","tollCharges","averageSpeed","routeWaypoints","generateMockTrips","trips","today","Date","i","tripDate","forEach","route","routeIndex","dayName","getDay","includes","morningTrip","routeId","vehicleId","departureDatetime","getFullYear","getMonth","getDate","arrivalDatetime","totalSeats","availableSeats","floor","push","afternoonTrip","generateMockSeats","tripId","seats","seatsPerRow","rows","ceil","row","col","length","seatNumber","price","isAvailable","mockUsers","email","firstName","lastName","phone","role","mockBookings","bookingReference","userId","seatId","passengerName","passengerPhone","passengerEmail","totalAmount","bookingStatus","paymentStatus","bookingDate","travelDate","mockPayments","bookingId","amount","paymentMethod","mockTransactionId","cardLastFour","processedAt","mockApi","searchTrips","origin","destination","date","Promise","resolve","setTimeout","searchDate","filter","trip","find","r","toDateString","map","vehicle","v","vehicleType","vt","originLocation","l","destinationLocation","getAllTrips","sort","a","b","getTripDetails","t","Error","createBooking","bookingData","newBooking","processPayment","paymentData","isSuccess","payment","failureReason","getUserBookings","booking","mockAnalytics","totalBookings","totalRevenue","activeTrips","totalUsers","monthlyData","month","bookings","revenue","popularRoutes","calculateDynamicPrice","dynamicPrice","dayOfWeek","isWeekend","isHoliday","occupancyRate","now","daysAdvance","operationalCost","profitMargin","minPrice","max","calculateTravelTime","trafficFactor","weatherConditions","baseTravelTime","weatherMultipliers","stopTime","reduce","total","stop","calculateCO2Emissions","emissionFactors","factor","calculateCurrentOccupancy","calculateOccupancyRate","parseFloat","toFixed"],"sources":["/Users/gohshunda/TWT-Transport-Booking/src/data/mockData.js"],"sourcesContent":["// Mock data for Transport Booking System - Student Project\n\nimport { addDays, format } from 'date-fns';\n\n// Helper function to generate UUIDs for mock data\nconst generateId = () => Math.random().toString(36).substr(2, 9);\n\n// Enhanced locations with coordinates for better mapping\nexport const mockLocations = [\n  {\n    id: 'loc-1',\n    name: 'KL Sentral Terminal',\n    city: 'Kuala Lumpur',\n    state: 'Federal Territory',\n    country: 'Malaysia',\n    coordinates: [3.1390, 101.6869],\n    address: 'KL Sentral, 50470 Kuala Lumpur'\n  },\n  {\n    id: 'loc-2',\n    name: 'Terminal Bersepadu Selatan',\n    city: 'Johor Bahru',\n    state: 'Johor',\n    country: 'Malaysia',\n    coordinates: [1.4854, 103.7618],\n    address: 'Jalan Tun Abdul Razak, 80000 Johor Bahru'\n  },\n  {\n    id: 'loc-3',\n    name: 'Komtar Bus Terminal',\n    city: 'George Town',\n    state: 'Penang',\n    country: 'Malaysia',\n    coordinates: [5.4164, 100.3327],\n    address: 'Jalan Dr Lim Chwee Leong, 10000 George Town'\n  },\n  {\n    id: 'loc-4',\n    name: 'Melaka Sentral',\n    city: 'Malacca City',\n    state: 'Malacca',\n    country: 'Malaysia',\n    coordinates: [2.1896, 102.2501],\n    address: 'Jalan Tun Razak, 75400 Melaka'\n  },\n  {\n    id: 'loc-5',\n    name: 'Terminal Amanjaya',\n    city: 'Ipoh',\n    state: 'Perak',\n    country: 'Malaysia',\n    coordinates: [4.5975, 101.0901],\n    address: 'Jalan Ampang, 30200 Ipoh'\n  },\n  {\n    id: 'loc-6',\n    name: 'Seremban Terminal',\n    city: 'Seremban',\n    state: 'Negeri Sembilan',\n    country: 'Malaysia',\n    coordinates: [2.7297, 101.9381],\n    address: 'Jalan Sungai Ujong, 70200 Seremban'\n  },\n  {\n    id: 'loc-7',\n    name: 'Genting Skyway Terminal',\n    city: 'Genting Highlands',\n    state: 'Pahang',\n    country: 'Malaysia',\n    coordinates: [3.4213, 101.7936],\n    address: 'Genting Highlands Resort, 69000 Genting Highlands'\n  },\n  {\n    id: 'loc-8',\n    name: 'Kuantan Terminal',\n    city: 'Kuantan',\n    state: 'Pahang',\n    country: 'Malaysia',\n    coordinates: [3.8077, 103.3260],\n    address: 'Jalan Stadium, 25000 Kuantan'\n  }\n];\n\n// Mock vehicle types\nexport const mockVehicleTypes = [\n  {\n    id: 'vt-1',\n    name: 'Standard Bus',\n    capacity: 45,\n    description: 'Regular bus with standard seating'\n  },\n  {\n    id: 'vt-2',\n    name: 'Luxury Coach',\n    capacity: 30,\n    description: 'Premium bus with comfortable seating and amenities'\n  },\n  {\n    id: 'vt-3',\n    name: 'Mini Van',\n    capacity: 12,\n    description: 'Small vehicle for shorter routes'\n  }\n];\n\n// Mock vehicles\nexport const mockVehicles = [\n  {\n    id: 'v-1',\n    plateNumber: 'TBS-001',\n    vehicleNumber: 'TBS-001',\n    vehicleTypeId: 'vt-1',\n    model: 'Mercedes OH1830',\n    year: 2022,\n    status: 'active',\n    capacity: 45,\n    mileage: 125000,\n    lastService: '2024-11-15'\n  },\n  {\n    id: 'v-2',\n    plateNumber: 'TBS-002',\n    vehicleNumber: 'TBS-002',\n    vehicleTypeId: 'vt-2',\n    model: 'Scania K410IB',\n    year: 2023,\n    status: 'active',\n    capacity: 30,\n    mileage: 85000,\n    lastService: '2024-11-20'\n  },\n  {\n    id: 'v-3',\n    plateNumber: 'TBS-003',\n    vehicleNumber: 'TBS-003',\n    vehicleTypeId: 'vt-3',\n    model: 'Toyota Hiace',\n    year: 2021,\n    status: 'active',\n    capacity: 12,\n    mileage: 95000,\n    lastService: '2024-11-10'\n  },\n  {\n    id: 'v-4',\n    plateNumber: 'TBS-004',\n    vehicleNumber: 'TBS-004',\n    vehicleTypeId: 'vt-1',\n    model: 'Volvo B8R',\n    year: 2022,\n    status: 'active',\n    capacity: 45,\n    mileage: 110000,\n    lastService: '2024-11-25'\n  }\n];\n\n// Mock routes with multiple intermediate stops\nexport const mockRoutes = [\n  {\n    id: 'r-1',\n    name: 'KL - Johor Express',\n    originId: 'loc-1',\n    destinationId: 'loc-2',\n    basePrice: 45.00,\n    durationHours: 5,\n    distanceKm: 350,\n    isActive: true,\n    intermediateStops: [\n      {\n        locationId: 'loc-6', // Seremban\n        stopNumber: 1,\n        arrivalOffset: 60, // 1 hour from start\n        departureOffset: 70, // 10 minute stop\n        additionalPrice: 15.00,\n        distanceFromOrigin: 65\n      },\n      {\n        locationId: 'loc-4', // Malacca\n        stopNumber: 2,\n        arrivalOffset: 120, // 2 hours from start\n        departureOffset: 135, // 15 minute stop\n        additionalPrice: 25.00,\n        distanceFromOrigin: 147\n      }\n    ],\n    operatingDays: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'],\n    frequency: 'daily',\n    estimatedFuelCost: 45.0,\n    tollCharges: 18.0,\n    averageSpeed: 70,\n    routeWaypoints: [\n      [3.1390, 101.6869], // KL Sentral\n      [3.0319, 101.7094], // Cheras area\n      [2.9167, 101.7500], // Nilai\n      [2.7297, 101.9381], // Seremban\n      [2.3167, 102.0500], // Rembau area\n      [2.1896, 102.2501]  // Malacca\n    ]\n  },\n  {\n    id: 'r-2',\n    name: 'KL - Penang Highway',\n    originId: 'loc-1',\n    destinationId: 'loc-3',\n    basePrice: 55.00,\n    durationHours: 4,\n    distanceKm: 365,\n    isActive: true,\n    intermediateStops: [\n      {\n        locationId: 'loc-7', // Genting (optional tourist stop)\n        stopNumber: 1,\n        arrivalOffset: 45,\n        departureOffset: 50, // 5 minute stop\n        additionalPrice: 20.00,\n        distanceFromOrigin: 55\n      },\n      {\n        locationId: 'loc-5', // Ipoh\n        stopNumber: 2,\n        arrivalOffset: 150,\n        departureOffset: 165, // 15 minute stop\n        additionalPrice: 30.00,\n        distanceFromOrigin: 205\n      }\n    ],\n    operatingDays: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'],\n    frequency: 'daily',\n    estimatedFuelCost: 52.0,\n    tollCharges: 22.0,\n    averageSpeed: 75,\n    routeWaypoints: [\n      [3.1390, 101.6869], // KL Sentral\n      [3.2167, 101.7167], // Gombak area\n      [3.4213, 101.7936], // Genting (via Karak Highway)\n      [3.8000, 101.5333], // Bentong area\n      [4.1167, 101.1500], // Tapah area\n      [4.5975, 101.0901], // Ipoh\n      [4.8500, 100.9333], // Kuala Kangsar\n      [5.1167, 100.7500], // Taiping area\n      [5.4164, 100.3327]  // Penang\n    ]\n  },\n  {\n    id: 'r-3',\n    name: 'KL - Malacca Direct',\n    originId: 'loc-1',\n    destinationId: 'loc-4',\n    basePrice: 25.00,\n    durationHours: 2,\n    distanceKm: 147,\n    isActive: true,\n    intermediateStops: [\n      {\n        locationId: 'loc-6', // Seremban\n        stopNumber: 1,\n        arrivalOffset: 60,\n        departureOffset: 65, // 5 minute stop\n        additionalPrice: 15.00,\n        distanceFromOrigin: 65\n      }\n    ],\n    operatingDays: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'],\n    frequency: 'weekdays',\n    estimatedFuelCost: 20.0,\n    tollCharges: 8.0,\n    averageSpeed: 70,\n    routeWaypoints: [\n      [3.1390, 101.6869], // KL\n      [2.7297, 101.9381], // Seremban\n      [2.1896, 102.2501]  // Malacca\n    ]\n  },\n  {\n    id: 'r-4',\n    name: 'Ipoh - Penang Express',\n    originId: 'loc-5',\n    destinationId: 'loc-3',\n    basePrice: 30.00,\n    durationHours: 2,\n    distanceKm: 125,\n    isActive: true,\n    intermediateStops: [],\n    operatingDays: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'],\n    frequency: 'daily',\n    estimatedFuelCost: 18.0,\n    tollCharges: 12.0,\n    averageSpeed: 65,\n    routeWaypoints: [\n      [4.5975, 101.0901], // Ipoh\n      [4.8500, 100.9333], // Kuala Kangsar\n      [5.1167, 100.7500], // Taiping area\n      [5.4164, 100.3327]  // Penang\n    ]\n  },\n  {\n    id: 'r-5',\n    name: 'KL - East Coast Express',\n    originId: 'loc-1',\n    destinationId: 'loc-8',\n    basePrice: 65.00,\n    durationHours: 4.5,\n    distanceKm: 280,\n    isActive: true,\n    intermediateStops: [\n      {\n        locationId: 'loc-7', // Genting\n        stopNumber: 1,\n        arrivalOffset: 50,\n        departureOffset: 60, // 10 minute stop\n        additionalPrice: 20.00,\n        distanceFromOrigin: 55\n      }\n    ],\n    operatingDays: ['friday', 'saturday', 'sunday'],\n    frequency: 'weekend',\n    estimatedFuelCost: 38.0,\n    tollCharges: 15.0,\n    averageSpeed: 62,\n    routeWaypoints: [\n      [3.1390, 101.6869], // KL Sentral\n      [3.2167, 101.7167], // Gombak area\n      [3.4213, 101.7936], // Genting\n      [3.6500, 102.2500], // Bentong\n      [3.7833, 102.9167], // Temerloh area\n      [3.8077, 103.3260]  // Kuantan\n    ]\n  }\n];\n\n// Enhanced trip generation with occupation tracking\nexport const generateMockTrips = () => {\n  const trips = [];\n  const today = new Date();\n  \n  for (let i = 0; i < 7; i++) {\n    const tripDate = addDays(today, i);\n    \n    // Generate multiple trips per day for each route\n    mockRoutes.forEach((route, routeIndex) => {\n      const dayName = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'][tripDate.getDay()];\n      \n      if (route.operatingDays.includes(dayName)) {\n        // Morning trip\n        const morningTrip = {\n          id: `trip-${route.id}-${i}-morning`,\n          routeId: route.id,\n          vehicleId: `v-${routeIndex + 1}`,\n          departureDatetime: new Date(tripDate.getFullYear(), tripDate.getMonth(), tripDate.getDate(), 7 + routeIndex, 0),\n          arrivalDatetime: new Date(tripDate.getFullYear(), tripDate.getMonth(), tripDate.getDate(), 7 + routeIndex + route.durationHours, 0),\n          totalSeats: 45,\n          availableSeats: Math.floor(Math.random() * 25) + 15, // 15-40 available\n          status: 'scheduled'\n        };\n        trips.push(morningTrip);\n        \n        // Afternoon trip (if it's a popular route)\n        if (routeIndex < 3) {\n          const afternoonTrip = {\n            id: `trip-${route.id}-${i}-afternoon`,\n            routeId: route.id,\n            vehicleId: `v-${routeIndex + 2}`,\n            departureDatetime: new Date(tripDate.getFullYear(), tripDate.getMonth(), tripDate.getDate(), 14 + routeIndex, 0),\n            arrivalDatetime: new Date(tripDate.getFullYear(), tripDate.getMonth(), tripDate.getDate(), 14 + routeIndex + route.durationHours, 0),\n            totalSeats: 45,\n            availableSeats: Math.floor(Math.random() * 30) + 10, // 10-40 available\n            status: 'scheduled'\n          };\n          trips.push(afternoonTrip);\n        }\n      }\n    });\n  }\n  \n  return trips;\n};\n\n// Mock seats generation\nexport const generateMockSeats = (tripId, capacity, basePrice) => {\n  const seats = [];\n  const seatsPerRow = 4;\n  const rows = Math.ceil(capacity / seatsPerRow);\n  \n  for (let row = 1; row <= rows; row++) {\n    for (const col of ['A', 'B', 'C', 'D']) {\n      if (seats.length >= capacity) break;\n      \n      seats.push({\n        id: `seat-${tripId}-${row}${col}`,\n        tripId: tripId,\n        seatNumber: `${row}${col}`,\n        price: basePrice,\n        isAvailable: Math.random() > 0.1 // 90% available\n      });\n    }\n  }\n  \n  return seats;\n};\n\n// Mock users\nexport const mockUsers = [\n  {\n    id: 'user-admin',\n    email: 'admin@transportbooking.com',\n    firstName: 'Admin',\n    lastName: 'User',\n    phone: '+60123456789',\n    role: 'admin',\n    isActive: true\n  },\n  {\n    id: 'user-1',\n    email: 'john.doe@email.com',\n    firstName: 'John',\n    lastName: 'Doe',\n    phone: '+60187654321',\n    role: 'user',\n    isActive: true\n  },\n  {\n    id: 'user-2',\n    email: 'jane.smith@email.com',\n    firstName: 'Jane',\n    lastName: 'Smith',\n    phone: '+60198765432',\n    role: 'user',\n    isActive: true\n  }\n];\n\n// Mock bookings\nexport const mockBookings = [\n  {\n    id: 'booking-1',\n    bookingReference: 'TBS20240115001',\n    userId: 'user-1',\n    tripId: 'trip-r-1-1-morning',\n    seatId: 'seat-trip-r-1-1-morning-1A',\n    passengerName: 'John Doe',\n    passengerPhone: '+60187654321',\n    passengerEmail: 'john.doe@email.com',\n    totalAmount: 45.00,\n    bookingStatus: 'confirmed',\n    paymentStatus: 'paid',\n    bookingDate: new Date(),\n    travelDate: addDays(new Date(), 1)\n  },\n  {\n    id: 'booking-2',\n    bookingReference: 'TBS20240115002',\n    userId: 'user-2',\n    tripId: 'trip-r-2-2-afternoon',\n    seatId: 'seat-trip-r-2-2-afternoon-2A',\n    passengerName: 'Jane Smith',\n    passengerPhone: '+60198765432',\n    passengerEmail: 'jane.smith@email.com',\n    totalAmount: 55.00,\n    bookingStatus: 'pending',\n    paymentStatus: 'pending',\n    bookingDate: new Date(),\n    travelDate: addDays(new Date(), 2)\n  }\n];\n\n// Mock payments\nexport const mockPayments = [\n  {\n    id: 'payment-1',\n    bookingId: 'booking-1',\n    amount: 45.00,\n    paymentMethod: 'credit_card',\n    mockTransactionId: 'MOCK_TXN_20240115_123456',\n    cardLastFour: '1111',\n    status: 'completed',\n    processedAt: new Date()\n  }\n];\n\n// Helper functions for mock API\nexport const mockApi = {\n  // Search trips\n  searchTrips: async ({ origin, destination, date }) => {\n    await new Promise(resolve => setTimeout(resolve, 800)); // Simulate API delay\n    \n    const trips = generateMockTrips();\n    const searchDate = new Date(date);\n    \n    return trips.filter(trip => {\n      const route = mockRoutes.find(r => r.id === trip.routeId);\n      const tripDate = trip.departureDatetime;\n      \n      return route && \n             route.originId === origin && \n             route.destinationId === destination &&\n             tripDate.toDateString() === searchDate.toDateString();\n    }).map(trip => {\n      const route = mockRoutes.find(r => r.id === trip.routeId);\n      const vehicle = mockVehicles.find(v => v.id === trip.vehicleId);\n      const vehicleType = vehicle ? mockVehicleTypes.find(vt => vt.id === vehicle.vehicleTypeId) : null;\n      const originLocation = mockLocations.find(l => l.id === route?.originId);\n      const destinationLocation = mockLocations.find(l => l.id === route?.destinationId);\n      \n      return {\n        ...trip,\n        route,\n        vehicle,\n        vehicleType,\n        originLocation,\n        destinationLocation\n      };\n    });\n  },\n  \n  // Get all trips\n  getAllTrips: async () => {\n    await new Promise(resolve => setTimeout(resolve, 600)); // Simulate API delay\n    \n    const trips = generateMockTrips();\n    \n    return trips.map(trip => {\n      const route = mockRoutes.find(r => r.id === trip.routeId);\n      const vehicle = mockVehicles.find(v => v.id === trip.vehicleId);\n      const vehicleType = vehicle ? mockVehicleTypes.find(vt => vt.id === vehicle.vehicleTypeId) : null;\n      const originLocation = mockLocations.find(l => l.id === route?.originId);\n      const destinationLocation = mockLocations.find(l => l.id === route?.destinationId);\n      \n      return {\n        ...trip,\n        route,\n        vehicle,\n        vehicleType,\n        originLocation,\n        destinationLocation\n      };\n    }).sort((a, b) => a.departureDatetime - b.departureDatetime); // Sort by departure time\n  },\n  \n  // Get trip details with seats\n  getTripDetails: async (tripId) => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    const trips = generateMockTrips();\n    const trip = trips.find(t => t.id === tripId);\n    \n    if (!trip) throw new Error('Trip not found');\n    \n    const route = mockRoutes.find(r => r.id === trip.routeId);\n    const seats = generateMockSeats(tripId, trip.totalSeats, route.basePrice);\n    \n    return {\n      ...trip,\n      route,\n      seats\n    };\n  },\n  \n  // Create booking\n  createBooking: async (bookingData) => {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const newBooking = {\n      id: generateId(),\n      bookingReference: `TBS${format(new Date(), 'yyyyMMdd')}${Math.floor(Math.random() * 900) + 100}`,\n      ...bookingData,\n      bookingStatus: 'pending',\n      paymentStatus: 'pending',\n      bookingDate: new Date()\n    };\n    \n    return newBooking;\n  },\n  \n  // Process payment\n  processPayment: async (paymentData) => {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // Simulate payment success/failure\n    const isSuccess = Math.random() > 0.1; // 90% success rate\n    \n    const payment = {\n      id: generateId(),\n      mockTransactionId: `MOCK_TXN_${format(new Date(), 'yyyyMMdd')}_${Math.floor(Math.random() * 1000000)}`,\n      status: isSuccess ? 'completed' : 'failed',\n      failureReason: isSuccess ? null : 'Insufficient funds',\n      processedAt: new Date(),\n      ...paymentData\n    };\n    \n    return payment;\n  },\n  \n  // Get user bookings\n  getUserBookings: async (userId) => {\n    await new Promise(resolve => setTimeout(resolve, 600));\n    \n    return mockBookings.filter(booking => booking.userId === userId).map(booking => {\n      const trips = generateMockTrips();\n      const trip = trips.find(t => t.id === booking.tripId);\n      const route = mockRoutes.find(r => r.id === trip?.routeId);\n      const originLocation = mockLocations.find(l => l.id === route?.originId);\n      const destinationLocation = mockLocations.find(l => l.id === route?.destinationId);\n      \n      return {\n        ...booking,\n        trip: {\n          ...trip,\n          route,\n          originLocation,\n          destinationLocation\n        }\n      };\n    });\n  }\n};\n\n// Analytics mock data\nexport const mockAnalytics = {\n  totalBookings: 1247,\n  totalRevenue: 67890.50,\n  activeTrips: 24,\n  totalUsers: 892,\n  monthlyData: [\n    { month: 'Jan', bookings: 98, revenue: 4567.80 },\n    { month: 'Feb', bookings: 112, revenue: 5234.90 },\n    { month: 'Mar', bookings: 89, revenue: 4123.45 },\n    { month: 'Apr', bookings: 134, revenue: 6789.12 },\n    { month: 'May', bookings: 156, revenue: 7890.34 },\n    { month: 'Jun', bookings: 178, revenue: 8456.78 }\n  ],\n  popularRoutes: [\n    { route: 'KL - Johor Express', bookings: 234 },\n    { route: 'KL - Penang Highway', bookings: 198 },\n    { route: 'KL - Malacca Direct', bookings: 156 },\n    { route: 'Ipoh - Penang Express', bookings: 89 }\n  ]\n};\n\n// Enhanced trip calculation with real-time pricing algorithm\nexport const calculateDynamicPrice = (route, date, availableSeats, totalSeats) => {\n  const basePrice = route.basePrice;\n  let dynamicPrice = basePrice;\n  \n  // Date-based pricing\n  const dayOfWeek = date.getDay();\n  const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;\n  const isHoliday = false; // Could be enhanced with holiday calendar\n  \n  if (isWeekend) {\n    dynamicPrice *= 1.15; // 15% weekend surcharge\n  }\n  \n  if (isHoliday) {\n    dynamicPrice *= 1.25; // 25% holiday surcharge\n  }\n  \n  // Demand-based pricing\n  const occupancyRate = 1 - (availableSeats / totalSeats);\n  if (occupancyRate > 0.8) {\n    dynamicPrice *= 1.20; // 20% high demand surcharge\n  } else if (occupancyRate > 0.6) {\n    dynamicPrice *= 1.10; // 10% moderate demand surcharge\n  } else if (occupancyRate < 0.3) {\n    dynamicPrice *= 0.90; // 10% low demand discount\n  }\n  \n  // Time-based pricing (advance booking discount)\n  const now = new Date();\n  const daysAdvance = Math.ceil((date - now) / (1000 * 60 * 60 * 24));\n  if (daysAdvance > 14) {\n    dynamicPrice *= 0.85; // 15% early bird discount\n  } else if (daysAdvance < 2) {\n    dynamicPrice *= 1.30; // 30% last minute surcharge\n  }\n  \n  // Add operational costs\n  const operationalCost = route.estimatedFuelCost + route.tollCharges;\n  const profitMargin = 0.25; // 25% profit margin\n  const minPrice = operationalCost * (1 + profitMargin);\n  \n  return Math.max(dynamicPrice, minPrice);\n};\n\n// Enhanced travel time estimation\nexport const calculateTravelTime = (route, trafficFactor = 1.0, weatherConditions = 'clear') => {\n  let baseTravelTime = route.distanceKm / route.averageSpeed; // hours\n  \n  // Traffic adjustment\n  baseTravelTime *= trafficFactor;\n  \n  // Weather adjustment\n  const weatherMultipliers = {\n    'clear': 1.0,\n    'light_rain': 1.15,\n    'heavy_rain': 1.35,\n    'fog': 1.25,\n    'storm': 1.50\n  };\n  \n  baseTravelTime *= weatherMultipliers[weatherConditions] || 1.0;\n  \n  // Add stop times\n  const stopTime = route.intermediateStops.reduce((total, stop) => {\n    return total + (stop.departureOffset - stop.arrivalOffset);\n  }, 0) / 60; // convert minutes to hours\n  \n  return baseTravelTime + stopTime;\n};\n\n// Enhanced CO2 calculation for environmental impact\nexport const calculateCO2Emissions = (route, vehicleType) => {\n  const emissionFactors = {\n    'vt-1': 0.68, // Standard Bus kg CO2 per km\n    'vt-2': 0.85, // Luxury Coach (heavier, more emissions)\n    'vt-3': 0.45  // Mini Van (smaller, less emissions)\n  };\n  \n  const factor = emissionFactors[vehicleType] || 0.68;\n  return route.distanceKm * factor;\n};\n\n// Utility functions for trip calculations\nexport const calculateCurrentOccupancy = (trip) => {\n  return trip.totalSeats - trip.availableSeats;\n};\n\nexport const calculateOccupancyRate = (trip) => {\n  const occupancyRate = ((trip.totalSeats - trip.availableSeats) / trip.totalSeats * 100);\n  return parseFloat(occupancyRate.toFixed(1));\n}; "],"mappings":"AAAA;;AAEA,SAASA,OAAO,EAAEC,MAAM,QAAQ,UAAU;;AAE1C;AACA,MAAMC,UAAU,GAAGA,CAAA,KAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;;AAEhE;AACA,OAAO,MAAMC,aAAa,GAAG,CAC3B;EACEC,EAAE,EAAE,OAAO;EACXC,IAAI,EAAE,qBAAqB;EAC3BC,IAAI,EAAE,cAAc;EACpBC,KAAK,EAAE,mBAAmB;EAC1BC,OAAO,EAAE,UAAU;EACnBC,WAAW,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;EAC/BC,OAAO,EAAE;AACX,CAAC,EACD;EACEN,EAAE,EAAE,OAAO;EACXC,IAAI,EAAE,4BAA4B;EAClCC,IAAI,EAAE,aAAa;EACnBC,KAAK,EAAE,OAAO;EACdC,OAAO,EAAE,UAAU;EACnBC,WAAW,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;EAC/BC,OAAO,EAAE;AACX,CAAC,EACD;EACEN,EAAE,EAAE,OAAO;EACXC,IAAI,EAAE,qBAAqB;EAC3BC,IAAI,EAAE,aAAa;EACnBC,KAAK,EAAE,QAAQ;EACfC,OAAO,EAAE,UAAU;EACnBC,WAAW,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;EAC/BC,OAAO,EAAE;AACX,CAAC,EACD;EACEN,EAAE,EAAE,OAAO;EACXC,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE,cAAc;EACpBC,KAAK,EAAE,SAAS;EAChBC,OAAO,EAAE,UAAU;EACnBC,WAAW,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;EAC/BC,OAAO,EAAE;AACX,CAAC,EACD;EACEN,EAAE,EAAE,OAAO;EACXC,IAAI,EAAE,mBAAmB;EACzBC,IAAI,EAAE,MAAM;EACZC,KAAK,EAAE,OAAO;EACdC,OAAO,EAAE,UAAU;EACnBC,WAAW,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;EAC/BC,OAAO,EAAE;AACX,CAAC,EACD;EACEN,EAAE,EAAE,OAAO;EACXC,IAAI,EAAE,mBAAmB;EACzBC,IAAI,EAAE,UAAU;EAChBC,KAAK,EAAE,iBAAiB;EACxBC,OAAO,EAAE,UAAU;EACnBC,WAAW,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;EAC/BC,OAAO,EAAE;AACX,CAAC,EACD;EACEN,EAAE,EAAE,OAAO;EACXC,IAAI,EAAE,yBAAyB;EAC/BC,IAAI,EAAE,mBAAmB;EACzBC,KAAK,EAAE,QAAQ;EACfC,OAAO,EAAE,UAAU;EACnBC,WAAW,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;EAC/BC,OAAO,EAAE;AACX,CAAC,EACD;EACEN,EAAE,EAAE,OAAO;EACXC,IAAI,EAAE,kBAAkB;EACxBC,IAAI,EAAE,SAAS;EACfC,KAAK,EAAE,QAAQ;EACfC,OAAO,EAAE,UAAU;EACnBC,WAAW,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;EAC/BC,OAAO,EAAE;AACX,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAC9B;EACEP,EAAE,EAAE,MAAM;EACVC,IAAI,EAAE,cAAc;EACpBO,QAAQ,EAAE,EAAE;EACZC,WAAW,EAAE;AACf,CAAC,EACD;EACET,EAAE,EAAE,MAAM;EACVC,IAAI,EAAE,cAAc;EACpBO,QAAQ,EAAE,EAAE;EACZC,WAAW,EAAE;AACf,CAAC,EACD;EACET,EAAE,EAAE,MAAM;EACVC,IAAI,EAAE,UAAU;EAChBO,QAAQ,EAAE,EAAE;EACZC,WAAW,EAAE;AACf,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,YAAY,GAAG,CAC1B;EACEV,EAAE,EAAE,KAAK;EACTW,WAAW,EAAE,SAAS;EACtBC,aAAa,EAAE,SAAS;EACxBC,aAAa,EAAE,MAAM;EACrBC,KAAK,EAAE,iBAAiB;EACxBC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,QAAQ;EAChBR,QAAQ,EAAE,EAAE;EACZS,OAAO,EAAE,MAAM;EACfC,WAAW,EAAE;AACf,CAAC,EACD;EACElB,EAAE,EAAE,KAAK;EACTW,WAAW,EAAE,SAAS;EACtBC,aAAa,EAAE,SAAS;EACxBC,aAAa,EAAE,MAAM;EACrBC,KAAK,EAAE,eAAe;EACtBC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,QAAQ;EAChBR,QAAQ,EAAE,EAAE;EACZS,OAAO,EAAE,KAAK;EACdC,WAAW,EAAE;AACf,CAAC,EACD;EACElB,EAAE,EAAE,KAAK;EACTW,WAAW,EAAE,SAAS;EACtBC,aAAa,EAAE,SAAS;EACxBC,aAAa,EAAE,MAAM;EACrBC,KAAK,EAAE,cAAc;EACrBC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,QAAQ;EAChBR,QAAQ,EAAE,EAAE;EACZS,OAAO,EAAE,KAAK;EACdC,WAAW,EAAE;AACf,CAAC,EACD;EACElB,EAAE,EAAE,KAAK;EACTW,WAAW,EAAE,SAAS;EACtBC,aAAa,EAAE,SAAS;EACxBC,aAAa,EAAE,MAAM;EACrBC,KAAK,EAAE,WAAW;EAClBC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,QAAQ;EAChBR,QAAQ,EAAE,EAAE;EACZS,OAAO,EAAE,MAAM;EACfC,WAAW,EAAE;AACf,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG,CACxB;EACEnB,EAAE,EAAE,KAAK;EACTC,IAAI,EAAE,oBAAoB;EAC1BmB,QAAQ,EAAE,OAAO;EACjBC,aAAa,EAAE,OAAO;EACtBC,SAAS,EAAE,KAAK;EAChBC,aAAa,EAAE,CAAC;EAChBC,UAAU,EAAE,GAAG;EACfC,QAAQ,EAAE,IAAI;EACdC,iBAAiB,EAAE,CACjB;IACEC,UAAU,EAAE,OAAO;IAAE;IACrBC,UAAU,EAAE,CAAC;IACbC,aAAa,EAAE,EAAE;IAAE;IACnBC,eAAe,EAAE,EAAE;IAAE;IACrBC,eAAe,EAAE,KAAK;IACtBC,kBAAkB,EAAE;EACtB,CAAC,EACD;IACEL,UAAU,EAAE,OAAO;IAAE;IACrBC,UAAU,EAAE,CAAC;IACbC,aAAa,EAAE,GAAG;IAAE;IACpBC,eAAe,EAAE,GAAG;IAAE;IACtBC,eAAe,EAAE,KAAK;IACtBC,kBAAkB,EAAE;EACtB,CAAC,CACF;EACDC,aAAa,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,CAAC;EAC7FC,SAAS,EAAE,OAAO;EAClBC,iBAAiB,EAAE,IAAI;EACvBC,WAAW,EAAE,IAAI;EACjBC,YAAY,EAAE,EAAE;EAChBC,cAAc,EAAE,CACd,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAE;EAAA;AAExB,CAAC,EACD;EACEtC,EAAE,EAAE,KAAK;EACTC,IAAI,EAAE,qBAAqB;EAC3BmB,QAAQ,EAAE,OAAO;EACjBC,aAAa,EAAE,OAAO;EACtBC,SAAS,EAAE,KAAK;EAChBC,aAAa,EAAE,CAAC;EAChBC,UAAU,EAAE,GAAG;EACfC,QAAQ,EAAE,IAAI;EACdC,iBAAiB,EAAE,CACjB;IACEC,UAAU,EAAE,OAAO;IAAE;IACrBC,UAAU,EAAE,CAAC;IACbC,aAAa,EAAE,EAAE;IACjBC,eAAe,EAAE,EAAE;IAAE;IACrBC,eAAe,EAAE,KAAK;IACtBC,kBAAkB,EAAE;EACtB,CAAC,EACD;IACEL,UAAU,EAAE,OAAO;IAAE;IACrBC,UAAU,EAAE,CAAC;IACbC,aAAa,EAAE,GAAG;IAClBC,eAAe,EAAE,GAAG;IAAE;IACtBC,eAAe,EAAE,KAAK;IACtBC,kBAAkB,EAAE;EACtB,CAAC,CACF;EACDC,aAAa,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,CAAC;EAC7FC,SAAS,EAAE,OAAO;EAClBC,iBAAiB,EAAE,IAAI;EACvBC,WAAW,EAAE,IAAI;EACjBC,YAAY,EAAE,EAAE;EAChBC,cAAc,EAAE,CACd,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAE;EAAA;AAExB,CAAC,EACD;EACEtC,EAAE,EAAE,KAAK;EACTC,IAAI,EAAE,qBAAqB;EAC3BmB,QAAQ,EAAE,OAAO;EACjBC,aAAa,EAAE,OAAO;EACtBC,SAAS,EAAE,KAAK;EAChBC,aAAa,EAAE,CAAC;EAChBC,UAAU,EAAE,GAAG;EACfC,QAAQ,EAAE,IAAI;EACdC,iBAAiB,EAAE,CACjB;IACEC,UAAU,EAAE,OAAO;IAAE;IACrBC,UAAU,EAAE,CAAC;IACbC,aAAa,EAAE,EAAE;IACjBC,eAAe,EAAE,EAAE;IAAE;IACrBC,eAAe,EAAE,KAAK;IACtBC,kBAAkB,EAAE;EACtB,CAAC,CACF;EACDC,aAAa,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,CAAC;EACvEC,SAAS,EAAE,UAAU;EACrBC,iBAAiB,EAAE,IAAI;EACvBC,WAAW,EAAE,GAAG;EAChBC,YAAY,EAAE,EAAE;EAChBC,cAAc,EAAE,CACd,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAE;EAAA;AAExB,CAAC,EACD;EACEtC,EAAE,EAAE,KAAK;EACTC,IAAI,EAAE,uBAAuB;EAC7BmB,QAAQ,EAAE,OAAO;EACjBC,aAAa,EAAE,OAAO;EACtBC,SAAS,EAAE,KAAK;EAChBC,aAAa,EAAE,CAAC;EAChBC,UAAU,EAAE,GAAG;EACfC,QAAQ,EAAE,IAAI;EACdC,iBAAiB,EAAE,EAAE;EACrBO,aAAa,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,CAAC;EAC7FC,SAAS,EAAE,OAAO;EAClBC,iBAAiB,EAAE,IAAI;EACvBC,WAAW,EAAE,IAAI;EACjBC,YAAY,EAAE,EAAE;EAChBC,cAAc,EAAE,CACd,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAE;EAAA;AAExB,CAAC,EACD;EACEtC,EAAE,EAAE,KAAK;EACTC,IAAI,EAAE,yBAAyB;EAC/BmB,QAAQ,EAAE,OAAO;EACjBC,aAAa,EAAE,OAAO;EACtBC,SAAS,EAAE,KAAK;EAChBC,aAAa,EAAE,GAAG;EAClBC,UAAU,EAAE,GAAG;EACfC,QAAQ,EAAE,IAAI;EACdC,iBAAiB,EAAE,CACjB;IACEC,UAAU,EAAE,OAAO;IAAE;IACrBC,UAAU,EAAE,CAAC;IACbC,aAAa,EAAE,EAAE;IACjBC,eAAe,EAAE,EAAE;IAAE;IACrBC,eAAe,EAAE,KAAK;IACtBC,kBAAkB,EAAE;EACtB,CAAC,CACF;EACDC,aAAa,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,QAAQ,CAAC;EAC/CC,SAAS,EAAE,SAAS;EACpBC,iBAAiB,EAAE,IAAI;EACvBC,WAAW,EAAE,IAAI;EACjBC,YAAY,EAAE,EAAE;EAChBC,cAAc,EAAE,CACd,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC;EAAE;EACpB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAE;EAAA;AAExB,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EACrC,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EAExB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1B,MAAMC,QAAQ,GAAGpD,OAAO,CAACiD,KAAK,EAAEE,CAAC,CAAC;;IAElC;IACAxB,UAAU,CAAC0B,OAAO,CAAC,CAACC,KAAK,EAAEC,UAAU,KAAK;MACxC,MAAMC,OAAO,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,CAAC,CAACJ,QAAQ,CAACK,MAAM,CAAC,CAAC,CAAC;MAEjH,IAAIH,KAAK,CAACb,aAAa,CAACiB,QAAQ,CAACF,OAAO,CAAC,EAAE;QACzC;QACA,MAAMG,WAAW,GAAG;UAClBnD,EAAE,EAAE,QAAQ8C,KAAK,CAAC9C,EAAE,IAAI2C,CAAC,UAAU;UACnCS,OAAO,EAAEN,KAAK,CAAC9C,EAAE;UACjBqD,SAAS,EAAE,KAAKN,UAAU,GAAG,CAAC,EAAE;UAChCO,iBAAiB,EAAE,IAAIZ,IAAI,CAACE,QAAQ,CAACW,WAAW,CAAC,CAAC,EAAEX,QAAQ,CAACY,QAAQ,CAAC,CAAC,EAAEZ,QAAQ,CAACa,OAAO,CAAC,CAAC,EAAE,CAAC,GAAGV,UAAU,EAAE,CAAC,CAAC;UAC/GW,eAAe,EAAE,IAAIhB,IAAI,CAACE,QAAQ,CAACW,WAAW,CAAC,CAAC,EAAEX,QAAQ,CAACY,QAAQ,CAAC,CAAC,EAAEZ,QAAQ,CAACa,OAAO,CAAC,CAAC,EAAE,CAAC,GAAGV,UAAU,GAAGD,KAAK,CAACvB,aAAa,EAAE,CAAC,CAAC;UACnIoC,UAAU,EAAE,EAAE;UACdC,cAAc,EAAEjE,IAAI,CAACkE,KAAK,CAAClE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;UAAE;UACrDoB,MAAM,EAAE;QACV,CAAC;QACDwB,KAAK,CAACsB,IAAI,CAACX,WAAW,CAAC;;QAEvB;QACA,IAAIJ,UAAU,GAAG,CAAC,EAAE;UAClB,MAAMgB,aAAa,GAAG;YACpB/D,EAAE,EAAE,QAAQ8C,KAAK,CAAC9C,EAAE,IAAI2C,CAAC,YAAY;YACrCS,OAAO,EAAEN,KAAK,CAAC9C,EAAE;YACjBqD,SAAS,EAAE,KAAKN,UAAU,GAAG,CAAC,EAAE;YAChCO,iBAAiB,EAAE,IAAIZ,IAAI,CAACE,QAAQ,CAACW,WAAW,CAAC,CAAC,EAAEX,QAAQ,CAACY,QAAQ,CAAC,CAAC,EAAEZ,QAAQ,CAACa,OAAO,CAAC,CAAC,EAAE,EAAE,GAAGV,UAAU,EAAE,CAAC,CAAC;YAChHW,eAAe,EAAE,IAAIhB,IAAI,CAACE,QAAQ,CAACW,WAAW,CAAC,CAAC,EAAEX,QAAQ,CAACY,QAAQ,CAAC,CAAC,EAAEZ,QAAQ,CAACa,OAAO,CAAC,CAAC,EAAE,EAAE,GAAGV,UAAU,GAAGD,KAAK,CAACvB,aAAa,EAAE,CAAC,CAAC;YACpIoC,UAAU,EAAE,EAAE;YACdC,cAAc,EAAEjE,IAAI,CAACkE,KAAK,CAAClE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;YAAE;YACrDoB,MAAM,EAAE;UACV,CAAC;UACDwB,KAAK,CAACsB,IAAI,CAACC,aAAa,CAAC;QAC3B;MACF;IACF,CAAC,CAAC;EACJ;EAEA,OAAOvB,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMwB,iBAAiB,GAAGA,CAACC,MAAM,EAAEzD,QAAQ,EAAEc,SAAS,KAAK;EAChE,MAAM4C,KAAK,GAAG,EAAE;EAChB,MAAMC,WAAW,GAAG,CAAC;EACrB,MAAMC,IAAI,GAAGzE,IAAI,CAAC0E,IAAI,CAAC7D,QAAQ,GAAG2D,WAAW,CAAC;EAE9C,KAAK,IAAIG,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAIF,IAAI,EAAEE,GAAG,EAAE,EAAE;IACpC,KAAK,MAAMC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE;MACtC,IAAIL,KAAK,CAACM,MAAM,IAAIhE,QAAQ,EAAE;MAE9B0D,KAAK,CAACJ,IAAI,CAAC;QACT9D,EAAE,EAAE,QAAQiE,MAAM,IAAIK,GAAG,GAAGC,GAAG,EAAE;QACjCN,MAAM,EAAEA,MAAM;QACdQ,UAAU,EAAE,GAAGH,GAAG,GAAGC,GAAG,EAAE;QAC1BG,KAAK,EAAEpD,SAAS;QAChBqD,WAAW,EAAEhF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;MACnC,CAAC,CAAC;IACJ;EACF;EAEA,OAAOsE,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMU,SAAS,GAAG,CACvB;EACE5E,EAAE,EAAE,YAAY;EAChB6E,KAAK,EAAE,4BAA4B;EACnCC,SAAS,EAAE,OAAO;EAClBC,QAAQ,EAAE,MAAM;EAChBC,KAAK,EAAE,cAAc;EACrBC,IAAI,EAAE,OAAO;EACbxD,QAAQ,EAAE;AACZ,CAAC,EACD;EACEzB,EAAE,EAAE,QAAQ;EACZ6E,KAAK,EAAE,oBAAoB;EAC3BC,SAAS,EAAE,MAAM;EACjBC,QAAQ,EAAE,KAAK;EACfC,KAAK,EAAE,cAAc;EACrBC,IAAI,EAAE,MAAM;EACZxD,QAAQ,EAAE;AACZ,CAAC,EACD;EACEzB,EAAE,EAAE,QAAQ;EACZ6E,KAAK,EAAE,sBAAsB;EAC7BC,SAAS,EAAE,MAAM;EACjBC,QAAQ,EAAE,OAAO;EACjBC,KAAK,EAAE,cAAc;EACrBC,IAAI,EAAE,MAAM;EACZxD,QAAQ,EAAE;AACZ,CAAC,CACF;;AAED;AACA,OAAO,MAAMyD,YAAY,GAAG,CAC1B;EACElF,EAAE,EAAE,WAAW;EACfmF,gBAAgB,EAAE,gBAAgB;EAClCC,MAAM,EAAE,QAAQ;EAChBnB,MAAM,EAAE,oBAAoB;EAC5BoB,MAAM,EAAE,4BAA4B;EACpCC,aAAa,EAAE,UAAU;EACzBC,cAAc,EAAE,cAAc;EAC9BC,cAAc,EAAE,oBAAoB;EACpCC,WAAW,EAAE,KAAK;EAClBC,aAAa,EAAE,WAAW;EAC1BC,aAAa,EAAE,MAAM;EACrBC,WAAW,EAAE,IAAIlD,IAAI,CAAC,CAAC;EACvBmD,UAAU,EAAErG,OAAO,CAAC,IAAIkD,IAAI,CAAC,CAAC,EAAE,CAAC;AACnC,CAAC,EACD;EACE1C,EAAE,EAAE,WAAW;EACfmF,gBAAgB,EAAE,gBAAgB;EAClCC,MAAM,EAAE,QAAQ;EAChBnB,MAAM,EAAE,sBAAsB;EAC9BoB,MAAM,EAAE,8BAA8B;EACtCC,aAAa,EAAE,YAAY;EAC3BC,cAAc,EAAE,cAAc;EAC9BC,cAAc,EAAE,sBAAsB;EACtCC,WAAW,EAAE,KAAK;EAClBC,aAAa,EAAE,SAAS;EACxBC,aAAa,EAAE,SAAS;EACxBC,WAAW,EAAE,IAAIlD,IAAI,CAAC,CAAC;EACvBmD,UAAU,EAAErG,OAAO,CAAC,IAAIkD,IAAI,CAAC,CAAC,EAAE,CAAC;AACnC,CAAC,CACF;;AAED;AACA,OAAO,MAAMoD,YAAY,GAAG,CAC1B;EACE9F,EAAE,EAAE,WAAW;EACf+F,SAAS,EAAE,WAAW;EACtBC,MAAM,EAAE,KAAK;EACbC,aAAa,EAAE,aAAa;EAC5BC,iBAAiB,EAAE,0BAA0B;EAC7CC,YAAY,EAAE,MAAM;EACpBnF,MAAM,EAAE,WAAW;EACnBoF,WAAW,EAAE,IAAI1D,IAAI,CAAC;AACxB,CAAC,CACF;;AAED;AACA,OAAO,MAAM2D,OAAO,GAAG;EACrB;EACAC,WAAW,EAAE,MAAAA,CAAO;IAAEC,MAAM;IAAEC,WAAW;IAAEC;EAAK,CAAC,KAAK;IACpD,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;;IAExD,MAAMnE,KAAK,GAAGD,iBAAiB,CAAC,CAAC;IACjC,MAAMsE,UAAU,GAAG,IAAInE,IAAI,CAAC+D,IAAI,CAAC;IAEjC,OAAOjE,KAAK,CAACsE,MAAM,CAACC,IAAI,IAAI;MAC1B,MAAMjE,KAAK,GAAG3B,UAAU,CAAC6F,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACjH,EAAE,KAAK+G,IAAI,CAAC3D,OAAO,CAAC;MACzD,MAAMR,QAAQ,GAAGmE,IAAI,CAACzD,iBAAiB;MAEvC,OAAOR,KAAK,IACLA,KAAK,CAAC1B,QAAQ,KAAKmF,MAAM,IACzBzD,KAAK,CAACzB,aAAa,KAAKmF,WAAW,IACnC5D,QAAQ,CAACsE,YAAY,CAAC,CAAC,KAAKL,UAAU,CAACK,YAAY,CAAC,CAAC;IAC9D,CAAC,CAAC,CAACC,GAAG,CAACJ,IAAI,IAAI;MACb,MAAMjE,KAAK,GAAG3B,UAAU,CAAC6F,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACjH,EAAE,KAAK+G,IAAI,CAAC3D,OAAO,CAAC;MACzD,MAAMgE,OAAO,GAAG1G,YAAY,CAACsG,IAAI,CAACK,CAAC,IAAIA,CAAC,CAACrH,EAAE,KAAK+G,IAAI,CAAC1D,SAAS,CAAC;MAC/D,MAAMiE,WAAW,GAAGF,OAAO,GAAG7G,gBAAgB,CAACyG,IAAI,CAACO,EAAE,IAAIA,EAAE,CAACvH,EAAE,KAAKoH,OAAO,CAACvG,aAAa,CAAC,GAAG,IAAI;MACjG,MAAM2G,cAAc,GAAGzH,aAAa,CAACiH,IAAI,CAACS,CAAC,IAAIA,CAAC,CAACzH,EAAE,MAAK8C,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAE1B,QAAQ,EAAC;MACxE,MAAMsG,mBAAmB,GAAG3H,aAAa,CAACiH,IAAI,CAACS,CAAC,IAAIA,CAAC,CAACzH,EAAE,MAAK8C,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEzB,aAAa,EAAC;MAElF,OAAO;QACL,GAAG0F,IAAI;QACPjE,KAAK;QACLsE,OAAO;QACPE,WAAW;QACXE,cAAc;QACdE;MACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED;EACAC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAM,IAAIjB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;;IAExD,MAAMnE,KAAK,GAAGD,iBAAiB,CAAC,CAAC;IAEjC,OAAOC,KAAK,CAAC2E,GAAG,CAACJ,IAAI,IAAI;MACvB,MAAMjE,KAAK,GAAG3B,UAAU,CAAC6F,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACjH,EAAE,KAAK+G,IAAI,CAAC3D,OAAO,CAAC;MACzD,MAAMgE,OAAO,GAAG1G,YAAY,CAACsG,IAAI,CAACK,CAAC,IAAIA,CAAC,CAACrH,EAAE,KAAK+G,IAAI,CAAC1D,SAAS,CAAC;MAC/D,MAAMiE,WAAW,GAAGF,OAAO,GAAG7G,gBAAgB,CAACyG,IAAI,CAACO,EAAE,IAAIA,EAAE,CAACvH,EAAE,KAAKoH,OAAO,CAACvG,aAAa,CAAC,GAAG,IAAI;MACjG,MAAM2G,cAAc,GAAGzH,aAAa,CAACiH,IAAI,CAACS,CAAC,IAAIA,CAAC,CAACzH,EAAE,MAAK8C,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAE1B,QAAQ,EAAC;MACxE,MAAMsG,mBAAmB,GAAG3H,aAAa,CAACiH,IAAI,CAACS,CAAC,IAAIA,CAAC,CAACzH,EAAE,MAAK8C,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEzB,aAAa,EAAC;MAElF,OAAO;QACL,GAAG0F,IAAI;QACPjE,KAAK;QACLsE,OAAO;QACPE,WAAW;QACXE,cAAc;QACdE;MACF,CAAC;IACH,CAAC,CAAC,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACvE,iBAAiB,GAAGwE,CAAC,CAACxE,iBAAiB,CAAC,CAAC,CAAC;EAChE,CAAC;EAED;EACAyE,cAAc,EAAE,MAAO9D,MAAM,IAAK;IAChC,MAAM,IAAIyC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IAEtD,MAAMnE,KAAK,GAAGD,iBAAiB,CAAC,CAAC;IACjC,MAAMwE,IAAI,GAAGvE,KAAK,CAACwE,IAAI,CAACgB,CAAC,IAAIA,CAAC,CAAChI,EAAE,KAAKiE,MAAM,CAAC;IAE7C,IAAI,CAAC8C,IAAI,EAAE,MAAM,IAAIkB,KAAK,CAAC,gBAAgB,CAAC;IAE5C,MAAMnF,KAAK,GAAG3B,UAAU,CAAC6F,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACjH,EAAE,KAAK+G,IAAI,CAAC3D,OAAO,CAAC;IACzD,MAAMc,KAAK,GAAGF,iBAAiB,CAACC,MAAM,EAAE8C,IAAI,CAACpD,UAAU,EAAEb,KAAK,CAACxB,SAAS,CAAC;IAEzE,OAAO;MACL,GAAGyF,IAAI;MACPjE,KAAK;MACLoB;IACF,CAAC;EACH,CAAC;EAED;EACAgE,aAAa,EAAE,MAAOC,WAAW,IAAK;IACpC,MAAM,IAAIzB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;IAEvD,MAAMyB,UAAU,GAAG;MACjBpI,EAAE,EAAEN,UAAU,CAAC,CAAC;MAChByF,gBAAgB,EAAE,MAAM1F,MAAM,CAAC,IAAIiD,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,GAAG/C,IAAI,CAACkE,KAAK,CAAClE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE;MAChG,GAAGuI,WAAW;MACdzC,aAAa,EAAE,SAAS;MACxBC,aAAa,EAAE,SAAS;MACxBC,WAAW,EAAE,IAAIlD,IAAI,CAAC;IACxB,CAAC;IAED,OAAO0F,UAAU;EACnB,CAAC;EAED;EACAC,cAAc,EAAE,MAAOC,WAAW,IAAK;IACrC,MAAM,IAAI5B,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;IAEvD;IACA,MAAM4B,SAAS,GAAG5I,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;;IAEvC,MAAM4I,OAAO,GAAG;MACdxI,EAAE,EAAEN,UAAU,CAAC,CAAC;MAChBwG,iBAAiB,EAAE,YAAYzG,MAAM,CAAC,IAAIiD,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,IAAI/C,IAAI,CAACkE,KAAK,CAAClE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,EAAE;MACtGoB,MAAM,EAAEuH,SAAS,GAAG,WAAW,GAAG,QAAQ;MAC1CE,aAAa,EAAEF,SAAS,GAAG,IAAI,GAAG,oBAAoB;MACtDnC,WAAW,EAAE,IAAI1D,IAAI,CAAC,CAAC;MACvB,GAAG4F;IACL,CAAC;IAED,OAAOE,OAAO;EAChB,CAAC;EAED;EACAE,eAAe,EAAE,MAAOtD,MAAM,IAAK;IACjC,MAAM,IAAIsB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IAEtD,OAAOzB,YAAY,CAAC4B,MAAM,CAAC6B,OAAO,IAAIA,OAAO,CAACvD,MAAM,KAAKA,MAAM,CAAC,CAAC+B,GAAG,CAACwB,OAAO,IAAI;MAC9E,MAAMnG,KAAK,GAAGD,iBAAiB,CAAC,CAAC;MACjC,MAAMwE,IAAI,GAAGvE,KAAK,CAACwE,IAAI,CAACgB,CAAC,IAAIA,CAAC,CAAChI,EAAE,KAAK2I,OAAO,CAAC1E,MAAM,CAAC;MACrD,MAAMnB,KAAK,GAAG3B,UAAU,CAAC6F,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACjH,EAAE,MAAK+G,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE3D,OAAO,EAAC;MAC1D,MAAMoE,cAAc,GAAGzH,aAAa,CAACiH,IAAI,CAACS,CAAC,IAAIA,CAAC,CAACzH,EAAE,MAAK8C,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAE1B,QAAQ,EAAC;MACxE,MAAMsG,mBAAmB,GAAG3H,aAAa,CAACiH,IAAI,CAACS,CAAC,IAAIA,CAAC,CAACzH,EAAE,MAAK8C,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEzB,aAAa,EAAC;MAElF,OAAO;QACL,GAAGsH,OAAO;QACV5B,IAAI,EAAE;UACJ,GAAGA,IAAI;UACPjE,KAAK;UACL0E,cAAc;UACdE;QACF;MACF,CAAC;IACH,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMkB,aAAa,GAAG;EAC3BC,aAAa,EAAE,IAAI;EACnBC,YAAY,EAAE,QAAQ;EACtBC,WAAW,EAAE,EAAE;EACfC,UAAU,EAAE,GAAG;EACfC,WAAW,EAAE,CACX;IAAEC,KAAK,EAAE,KAAK;IAAEC,QAAQ,EAAE,EAAE;IAAEC,OAAO,EAAE;EAAQ,CAAC,EAChD;IAAEF,KAAK,EAAE,KAAK;IAAEC,QAAQ,EAAE,GAAG;IAAEC,OAAO,EAAE;EAAQ,CAAC,EACjD;IAAEF,KAAK,EAAE,KAAK;IAAEC,QAAQ,EAAE,EAAE;IAAEC,OAAO,EAAE;EAAQ,CAAC,EAChD;IAAEF,KAAK,EAAE,KAAK;IAAEC,QAAQ,EAAE,GAAG;IAAEC,OAAO,EAAE;EAAQ,CAAC,EACjD;IAAEF,KAAK,EAAE,KAAK;IAAEC,QAAQ,EAAE,GAAG;IAAEC,OAAO,EAAE;EAAQ,CAAC,EACjD;IAAEF,KAAK,EAAE,KAAK;IAAEC,QAAQ,EAAE,GAAG;IAAEC,OAAO,EAAE;EAAQ,CAAC,CAClD;EACDC,aAAa,EAAE,CACb;IAAEvG,KAAK,EAAE,oBAAoB;IAAEqG,QAAQ,EAAE;EAAI,CAAC,EAC9C;IAAErG,KAAK,EAAE,qBAAqB;IAAEqG,QAAQ,EAAE;EAAI,CAAC,EAC/C;IAAErG,KAAK,EAAE,qBAAqB;IAAEqG,QAAQ,EAAE;EAAI,CAAC,EAC/C;IAAErG,KAAK,EAAE,uBAAuB;IAAEqG,QAAQ,EAAE;EAAG,CAAC;AAEpD,CAAC;;AAED;AACA,OAAO,MAAMG,qBAAqB,GAAGA,CAACxG,KAAK,EAAE2D,IAAI,EAAE7C,cAAc,EAAED,UAAU,KAAK;EAChF,MAAMrC,SAAS,GAAGwB,KAAK,CAACxB,SAAS;EACjC,IAAIiI,YAAY,GAAGjI,SAAS;;EAE5B;EACA,MAAMkI,SAAS,GAAG/C,IAAI,CAACxD,MAAM,CAAC,CAAC;EAC/B,MAAMwG,SAAS,GAAGD,SAAS,KAAK,CAAC,IAAIA,SAAS,KAAK,CAAC;EACpD,MAAME,SAAS,GAAG,KAAK,CAAC,CAAC;;EAEzB,IAAID,SAAS,EAAE;IACbF,YAAY,IAAI,IAAI,CAAC,CAAC;EACxB;EAEA,IAAIG,SAAS,EAAE;IACbH,YAAY,IAAI,IAAI,CAAC,CAAC;EACxB;;EAEA;EACA,MAAMI,aAAa,GAAG,CAAC,GAAI/F,cAAc,GAAGD,UAAW;EACvD,IAAIgG,aAAa,GAAG,GAAG,EAAE;IACvBJ,YAAY,IAAI,IAAI,CAAC,CAAC;EACxB,CAAC,MAAM,IAAII,aAAa,GAAG,GAAG,EAAE;IAC9BJ,YAAY,IAAI,IAAI,CAAC,CAAC;EACxB,CAAC,MAAM,IAAII,aAAa,GAAG,GAAG,EAAE;IAC9BJ,YAAY,IAAI,IAAI,CAAC,CAAC;EACxB;;EAEA;EACA,MAAMK,GAAG,GAAG,IAAIlH,IAAI,CAAC,CAAC;EACtB,MAAMmH,WAAW,GAAGlK,IAAI,CAAC0E,IAAI,CAAC,CAACoC,IAAI,GAAGmD,GAAG,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;EACnE,IAAIC,WAAW,GAAG,EAAE,EAAE;IACpBN,YAAY,IAAI,IAAI,CAAC,CAAC;EACxB,CAAC,MAAM,IAAIM,WAAW,GAAG,CAAC,EAAE;IAC1BN,YAAY,IAAI,IAAI,CAAC,CAAC;EACxB;;EAEA;EACA,MAAMO,eAAe,GAAGhH,KAAK,CAACX,iBAAiB,GAAGW,KAAK,CAACV,WAAW;EACnE,MAAM2H,YAAY,GAAG,IAAI,CAAC,CAAC;EAC3B,MAAMC,QAAQ,GAAGF,eAAe,IAAI,CAAC,GAAGC,YAAY,CAAC;EAErD,OAAOpK,IAAI,CAACsK,GAAG,CAACV,YAAY,EAAES,QAAQ,CAAC;AACzC,CAAC;;AAED;AACA,OAAO,MAAME,mBAAmB,GAAGA,CAACpH,KAAK,EAAEqH,aAAa,GAAG,GAAG,EAAEC,iBAAiB,GAAG,OAAO,KAAK;EAC9F,IAAIC,cAAc,GAAGvH,KAAK,CAACtB,UAAU,GAAGsB,KAAK,CAACT,YAAY,CAAC,CAAC;;EAE5D;EACAgI,cAAc,IAAIF,aAAa;;EAE/B;EACA,MAAMG,kBAAkB,GAAG;IACzB,OAAO,EAAE,GAAG;IACZ,YAAY,EAAE,IAAI;IAClB,YAAY,EAAE,IAAI;IAClB,KAAK,EAAE,IAAI;IACX,OAAO,EAAE;EACX,CAAC;EAEDD,cAAc,IAAIC,kBAAkB,CAACF,iBAAiB,CAAC,IAAI,GAAG;;EAE9D;EACA,MAAMG,QAAQ,GAAGzH,KAAK,CAACpB,iBAAiB,CAAC8I,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAK;IAC/D,OAAOD,KAAK,IAAIC,IAAI,CAAC5I,eAAe,GAAG4I,IAAI,CAAC7I,aAAa,CAAC;EAC5D,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;;EAEZ,OAAOwI,cAAc,GAAGE,QAAQ;AAClC,CAAC;;AAED;AACA,OAAO,MAAMI,qBAAqB,GAAGA,CAAC7H,KAAK,EAAEwE,WAAW,KAAK;EAC3D,MAAMsD,eAAe,GAAG;IACtB,MAAM,EAAE,IAAI;IAAE;IACd,MAAM,EAAE,IAAI;IAAE;IACd,MAAM,EAAE,IAAI,CAAE;EAChB,CAAC;EAED,MAAMC,MAAM,GAAGD,eAAe,CAACtD,WAAW,CAAC,IAAI,IAAI;EACnD,OAAOxE,KAAK,CAACtB,UAAU,GAAGqJ,MAAM;AAClC,CAAC;;AAED;AACA,OAAO,MAAMC,yBAAyB,GAAI/D,IAAI,IAAK;EACjD,OAAOA,IAAI,CAACpD,UAAU,GAAGoD,IAAI,CAACnD,cAAc;AAC9C,CAAC;AAED,OAAO,MAAMmH,sBAAsB,GAAIhE,IAAI,IAAK;EAC9C,MAAM4C,aAAa,GAAI,CAAC5C,IAAI,CAACpD,UAAU,GAAGoD,IAAI,CAACnD,cAAc,IAAImD,IAAI,CAACpD,UAAU,GAAG,GAAI;EACvF,OAAOqH,UAAU,CAACrB,aAAa,CAACsB,OAAO,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}