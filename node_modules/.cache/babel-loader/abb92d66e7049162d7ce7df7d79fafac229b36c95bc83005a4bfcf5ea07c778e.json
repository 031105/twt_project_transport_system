{"ast":null,"code":"import api from './api';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Helper function to make API calls with authentication\nconst apiCall = async (endpoint, options = {}) => {\n  const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n  const url = `${baseUrl}${endpoint}`;\n  const defaultOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n    }\n  };\n  const fetchOptions = {\n    ...defaultOptions,\n    ...options\n  };\n  try {\n    console.log(`API Call: ${fetchOptions.method} ${url}`);\n    const response = await fetch(url, fetchOptions);\n\n    // 检查响应状态\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('API call failed:', errorText);\n\n      // 尝试解析错误信息\n      let errorMessage = `HTTP error! status: ${response.status}`;\n      try {\n        const errorJson = JSON.parse(errorText);\n        if (errorJson.message || errorJson.error) {\n          errorMessage = errorJson.message || errorJson.error;\n        }\n      } catch (e) {\n        // 如果不是JSON格式，使用原始错误文本\n        if (errorText) errorMessage = errorText;\n      }\n      throw new Error(errorMessage);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('API call failed:', error);\n    throw error;\n  }\n};\n\n// ==================== DASHBOARD STATISTICS ====================\n\nexport const getAdminStats = async () => {\n  try {\n    const response = await api.get('/admin/stats');\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch admin statistics');\n  }\n};\nexport const getDashboardStats = async () => {\n  try {\n    const response = await api.get('/admin/dashboard');\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch dashboard statistics');\n  }\n};\nexport const getAnalyticsData = async (type, startDate, endDate) => {\n  try {\n    const response = await api.get(`/admin/analytics/${type}?startDate=${startDate}&endDate=${endDate}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch analytics data');\n  }\n};\n\n// ==================== VEHICLE MANAGEMENT ====================\n\nexport const getAllVehicles = async () => {\n  try {\n    const response = await api.get('/admin/vehicles');\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch vehicles');\n  }\n};\nexport const getVehicles = async () => {\n  return getAllVehicles();\n};\nexport const createVehicle = async vehicleData => {\n  try {\n    const response = await api.post('/admin/vehicles', vehicleData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to create vehicle');\n  }\n};\nexport const updateVehicle = async (id, vehicleData) => {\n  try {\n    const response = await api.put(`/admin/vehicles/${id}`, vehicleData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to update vehicle');\n  }\n};\nexport const deleteVehicle = async id => {\n  try {\n    const response = await api.delete(`/admin/vehicles/${id}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to delete vehicle');\n  }\n};\n\n// ==================== ROUTE MANAGEMENT ====================\n\nexport const getAllRoutes = async () => {\n  try {\n    const response = await api.get('/admin/routes');\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch routes');\n  }\n};\nexport const getRoutes = async () => {\n  return getAllRoutes();\n};\nexport const getRouteById = async id => {\n  try {\n    const response = await api.get(`/admin/routes/${id}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch route details');\n  }\n};\nexport const createRoute = async routeData => {\n  try {\n    const response = await api.post('/admin/routes', routeData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to create route');\n  }\n};\nexport const updateRoute = async (id, routeData) => {\n  try {\n    const response = await api.put(`/admin/routes/${id}`, routeData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to update route');\n  }\n};\nexport const deleteRoute = async id => {\n  try {\n    const response = await api.delete(`/admin/routes/${id}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to delete route');\n  }\n};\nexport const getRouteStops = async routeId => {\n  try {\n    const response = await api.get(`/admin/routes/${routeId}/stops`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch route stops');\n  }\n};\nexport const getRoutePerformance = async routeId => {\n  try {\n    const response = await api.get(`/admin/routes/${routeId}/performance`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch route performance');\n  }\n};\n\n// ==================== SCHEDULE MANAGEMENT ====================\n\nexport const getSchedulesByDate = async date => {\n  try {\n    const response = await api.get(`/admin/schedules/by-date/${date}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch schedules');\n  }\n};\nexport const getSchedules = async () => {\n  try {\n    const response = await api.get('/admin/schedules');\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch schedules');\n  }\n};\nexport const getSchedulesByDateRange = async (startDate, endDate) => {\n  try {\n    const response = await api.get(`/admin/schedules/range?startDate=${startDate}&endDate=${endDate}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch schedules for date range');\n  }\n};\nexport const getTodaySchedules = async () => {\n  try {\n    const today = new Date().toISOString().split('T')[0];\n    const response = await api.get(`/admin/schedules/by-date/${today}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch today\\'s schedules');\n  }\n};\nexport const getTodaysSchedule = async () => {\n  return getTodaySchedules();\n};\nexport const createSchedule = async scheduleData => {\n  try {\n    const response = await api.post('/admin/schedules', scheduleData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to create schedule');\n  }\n};\nexport const updateSchedule = async (id, scheduleData) => {\n  try {\n    const response = await api.put(`/admin/schedules/${id}`, scheduleData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to update schedule');\n  }\n};\nexport const deleteSchedule = async id => {\n  try {\n    const response = await api.delete(`/admin/schedules/${id}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to delete schedule');\n  }\n};\nexport const addMoreTrips = async scheduleData => {\n  try {\n    const response = await api.post('/admin/schedules/bulk', scheduleData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to add more trips');\n  }\n};\n\n// ==================== CUSTOMER SERVICE ====================\n\nexport const searchTrips = async params => {\n  try {\n    const queryString = new URLSearchParams(params).toString();\n    const response = await api.get(`/admin/trips/search?${queryString}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to search trips');\n  }\n};\nexport const getTripDetails = async id => {\n  try {\n    const response = await api.get(`/admin/trips/${id}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch trip details');\n  }\n};\n\n// ==================== BOOKING MANAGEMENT ====================\n\nexport const getAllBookings = async () => {\n  try {\n    const response = await api.get('/admin/bookings');\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch bookings');\n  }\n};\nexport const getBookingById = async id => {\n  try {\n    const response = await api.get(`/admin/bookings/${id}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch booking details');\n  }\n};\nexport const updateBookingStatus = async (id, status) => {\n  try {\n    const response = await api.put(`/admin/bookings/${id}/status`, {\n      status\n    });\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to update booking status');\n  }\n};\nexport const searchBookings = async query => {\n  try {\n    const response = await api.get(`/admin/bookings/search?q=${query}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to search bookings');\n  }\n};\n\n// ==================== LOCATIONS ====================\n\nexport const getAllLocations = async () => {\n  try {\n    const response = await api.get('/admin/locations');\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch locations');\n  }\n};\nexport const getLocationsForRoutes = async () => {\n  try {\n    const response = await api.get('/admin/locations/for-routes');\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch locations for routes');\n  }\n};\nexport const createLocation = async locationData => {\n  try {\n    const response = await api.post('/admin/locations', locationData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to create location');\n  }\n};\nexport const updateLocation = async (id, locationData) => {\n  try {\n    const response = await api.put(`/admin/locations/${id}`, locationData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to update location');\n  }\n};\nexport const deleteLocation = async id => {\n  try {\n    const response = await api.delete(`/admin/locations/${id}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to delete location');\n  }\n};\n\n// ==================== ANALYTICS ====================\n\nexport const getRouteAnalytics = async (startDate, endDate) => {\n  try {\n    const response = await api.get(`/admin/analytics/routes?startDate=${startDate}&endDate=${endDate}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch route analytics');\n  }\n};\nexport const getRevenueAnalytics = async (startDate, endDate) => {\n  try {\n    const response = await api.get(`/admin/analytics/revenue?startDate=${startDate}&endDate=${endDate}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch revenue analytics');\n  }\n};\nexport const getOccupancyAnalytics = async (startDate, endDate) => {\n  try {\n    const response = await api.get(`/admin/analytics/occupancy?startDate=${startDate}&endDate=${endDate}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch occupancy analytics');\n  }\n};\n\n// ==================== UTILITY FUNCTIONS ====================\n\n// Format currency for display\nexport const formatCurrency = amount => {\n  return new Intl.NumberFormat('en-MY', {\n    style: 'currency',\n    currency: 'MYR'\n  }).format(amount);\n};\n\n// Format date for display\nexport const formatDate = date => {\n  return new Date(date).toLocaleDateString('en-MY');\n};\n\n// Format time for display\nexport const formatTime = time => {\n  return time;\n};\n\n// Calculate occupancy percentage\nexport const calculateOccupancy = (bookedSeats, totalSeats) => {\n  return bookedSeats / totalSeats * 100;\n};\n\n// Get occupancy color class based on percentage\nexport const getOccupancyColorClass = percentage => {\n  if (percentage >= 80) return 'bg-green-500';\n  if (percentage >= 50) return 'bg-blue-500';\n  if (percentage >= 30) return 'bg-yellow-500';\n  return 'bg-red-500';\n};\n\n// Error handler for API calls\nexport const handleApiError = (error, defaultMessage = 'An error occurred') => {\n  console.error(error);\n  return {\n    success: false,\n    message: error.message || defaultMessage\n  };\n};\n\n// 获取热门行程\nexport const getPopularTrips = async (startDate, endDate, limit = 5) => {\n  try {\n    const response = await api.get(`/admin/analytics/popular-trips?startDate=${startDate}&endDate=${endDate}&limit=${limit}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch popular trips');\n  }\n};\nexport default {\n  getAdminStats,\n  getDashboardStats,\n  getAnalyticsData,\n  getAllVehicles,\n  getVehicles,\n  createVehicle,\n  updateVehicle,\n  deleteVehicle,\n  getAllRoutes,\n  getRoutes,\n  getRouteById,\n  createRoute,\n  updateRoute,\n  deleteRoute,\n  getRouteStops,\n  getRoutePerformance,\n  getSchedulesByDate,\n  getSchedules,\n  getSchedulesByDateRange,\n  getTodaySchedules,\n  getTodaysSchedule,\n  createSchedule,\n  updateSchedule,\n  deleteSchedule,\n  addMoreTrips,\n  searchTrips,\n  getTripDetails,\n  getAllBookings,\n  getBookingById,\n  updateBookingStatus,\n  searchBookings,\n  getAllLocations,\n  getLocationsForRoutes,\n  createLocation,\n  updateLocation,\n  deleteLocation,\n  getRouteAnalytics,\n  getRevenueAnalytics,\n  getOccupancyAnalytics,\n  getPopularTrips\n};","map":{"version":3,"names":["api","API_BASE_URL","process","env","REACT_APP_API_URL","apiCall","endpoint","options","baseUrl","url","defaultOptions","method","headers","localStorage","getItem","fetchOptions","console","log","response","fetch","ok","errorText","text","error","errorMessage","status","errorJson","JSON","parse","message","e","Error","data","json","getAdminStats","get","handleApiError","getDashboardStats","getAnalyticsData","type","startDate","endDate","getAllVehicles","getVehicles","createVehicle","vehicleData","post","updateVehicle","id","put","deleteVehicle","delete","getAllRoutes","getRoutes","getRouteById","createRoute","routeData","updateRoute","deleteRoute","getRouteStops","routeId","getRoutePerformance","getSchedulesByDate","date","getSchedules","getSchedulesByDateRange","getTodaySchedules","today","Date","toISOString","split","getTodaysSchedule","createSchedule","scheduleData","updateSchedule","deleteSchedule","addMoreTrips","searchTrips","params","queryString","URLSearchParams","toString","getTripDetails","getAllBookings","getBookingById","updateBookingStatus","searchBookings","query","getAllLocations","getLocationsForRoutes","createLocation","locationData","updateLocation","deleteLocation","getRouteAnalytics","getRevenueAnalytics","getOccupancyAnalytics","formatCurrency","amount","Intl","NumberFormat","style","currency","format","formatDate","toLocaleDateString","formatTime","time","calculateOccupancy","bookedSeats","totalSeats","getOccupancyColorClass","percentage","defaultMessage","success","getPopularTrips","limit"],"sources":["/Users/gohshunda/TWT-Transport-Booking/src/services/adminApi.js"],"sourcesContent":["import api from './api';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Helper function to make API calls with authentication\nconst apiCall = async (endpoint, options = {}) => {\n  const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n  const url = `${baseUrl}${endpoint}`;\n  \n  const defaultOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n    }\n  };\n  \n  const fetchOptions = {\n    ...defaultOptions,\n    ...options,\n  };\n  \n  try {\n    console.log(`API Call: ${fetchOptions.method} ${url}`);\n    const response = await fetch(url, fetchOptions);\n    \n    // 检查响应状态\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('API call failed:', errorText);\n      \n      // 尝试解析错误信息\n      let errorMessage = `HTTP error! status: ${response.status}`;\n      try {\n        const errorJson = JSON.parse(errorText);\n        if (errorJson.message || errorJson.error) {\n          errorMessage = errorJson.message || errorJson.error;\n        }\n      } catch (e) {\n        // 如果不是JSON格式，使用原始错误文本\n        if (errorText) errorMessage = errorText;\n      }\n      \n      throw new Error(errorMessage);\n    }\n    \n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('API call failed:', error);\n    throw error;\n  }\n};\n\n// ==================== DASHBOARD STATISTICS ====================\n\nexport const getAdminStats = async () => {\n  try {\n    const response = await api.get('/admin/stats');\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch admin statistics');\n  }\n};\n\nexport const getDashboardStats = async () => {\n  try {\n    const response = await api.get('/admin/dashboard');\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch dashboard statistics');\n  }\n};\n\nexport const getAnalyticsData = async (type, startDate, endDate) => {\n  try {\n    const response = await api.get(`/admin/analytics/${type}?startDate=${startDate}&endDate=${endDate}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch analytics data');\n  }\n};\n\n// ==================== VEHICLE MANAGEMENT ====================\n\nexport const getAllVehicles = async () => {\n  try {\n    const response = await api.get('/admin/vehicles');\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch vehicles');\n  }\n};\n\nexport const getVehicles = async () => {\n  return getAllVehicles();\n};\n\nexport const createVehicle = async (vehicleData) => {\n  try {\n    const response = await api.post('/admin/vehicles', vehicleData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to create vehicle');\n  }\n};\n\nexport const updateVehicle = async (id, vehicleData) => {\n  try {\n    const response = await api.put(`/admin/vehicles/${id}`, vehicleData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to update vehicle');\n  }\n};\n\nexport const deleteVehicle = async (id) => {\n  try {\n    const response = await api.delete(`/admin/vehicles/${id}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to delete vehicle');\n  }\n};\n\n// ==================== ROUTE MANAGEMENT ====================\n\nexport const getAllRoutes = async () => {\n  try {\n    const response = await api.get('/admin/routes');\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch routes');\n  }\n};\n\nexport const getRoutes = async () => {\n  return getAllRoutes();\n};\n\nexport const getRouteById = async (id) => {\n  try {\n    const response = await api.get(`/admin/routes/${id}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch route details');\n  }\n};\n\nexport const createRoute = async (routeData) => {\n  try {\n    const response = await api.post('/admin/routes', routeData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to create route');\n  }\n};\n\nexport const updateRoute = async (id, routeData) => {\n  try {\n    const response = await api.put(`/admin/routes/${id}`, routeData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to update route');\n  }\n};\n\nexport const deleteRoute = async (id) => {\n  try {\n    const response = await api.delete(`/admin/routes/${id}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to delete route');\n  }\n};\n\nexport const getRouteStops = async (routeId) => {\n  try {\n    const response = await api.get(`/admin/routes/${routeId}/stops`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch route stops');\n  }\n};\n\nexport const getRoutePerformance = async (routeId) => {\n  try {\n    const response = await api.get(`/admin/routes/${routeId}/performance`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch route performance');\n  }\n};\n\n// ==================== SCHEDULE MANAGEMENT ====================\n\nexport const getSchedulesByDate = async (date) => {\n  try {\n    const response = await api.get(`/admin/schedules/by-date/${date}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch schedules');\n  }\n};\n\nexport const getSchedules = async () => {\n  try {\n    const response = await api.get('/admin/schedules');\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch schedules');\n  }\n};\n\nexport const getSchedulesByDateRange = async (startDate, endDate) => {\n  try {\n    const response = await api.get(`/admin/schedules/range?startDate=${startDate}&endDate=${endDate}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch schedules for date range');\n  }\n};\n\nexport const getTodaySchedules = async () => {\n  try {\n    const today = new Date().toISOString().split('T')[0];\n    const response = await api.get(`/admin/schedules/by-date/${today}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch today\\'s schedules');\n  }\n};\n\nexport const getTodaysSchedule = async () => {\n  return getTodaySchedules();\n};\n\nexport const createSchedule = async (scheduleData) => {\n  try {\n    const response = await api.post('/admin/schedules', scheduleData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to create schedule');\n  }\n};\n\nexport const updateSchedule = async (id, scheduleData) => {\n  try {\n    const response = await api.put(`/admin/schedules/${id}`, scheduleData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to update schedule');\n  }\n};\n\nexport const deleteSchedule = async (id) => {\n  try {\n    const response = await api.delete(`/admin/schedules/${id}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to delete schedule');\n  }\n};\n\nexport const addMoreTrips = async (scheduleData) => {\n  try {\n    const response = await api.post('/admin/schedules/bulk', scheduleData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to add more trips');\n  }\n};\n\n// ==================== CUSTOMER SERVICE ====================\n\nexport const searchTrips = async (params) => {\n  try {\n    const queryString = new URLSearchParams(params).toString();\n    const response = await api.get(`/admin/trips/search?${queryString}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to search trips');\n  }\n};\n\nexport const getTripDetails = async (id) => {\n  try {\n    const response = await api.get(`/admin/trips/${id}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch trip details');\n  }\n};\n\n// ==================== BOOKING MANAGEMENT ====================\n\nexport const getAllBookings = async () => {\n  try {\n    const response = await api.get('/admin/bookings');\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch bookings');\n  }\n};\n\nexport const getBookingById = async (id) => {\n  try {\n    const response = await api.get(`/admin/bookings/${id}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch booking details');\n  }\n};\n\nexport const updateBookingStatus = async (id, status) => {\n  try {\n    const response = await api.put(`/admin/bookings/${id}/status`, { status });\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to update booking status');\n  }\n};\n\nexport const searchBookings = async (query) => {\n  try {\n    const response = await api.get(`/admin/bookings/search?q=${query}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to search bookings');\n  }\n};\n\n// ==================== LOCATIONS ====================\n\nexport const getAllLocations = async () => {\n  try {\n    const response = await api.get('/admin/locations');\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch locations');\n  }\n};\n\nexport const getLocationsForRoutes = async () => {\n  try {\n    const response = await api.get('/admin/locations/for-routes');\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch locations for routes');\n  }\n};\n\nexport const createLocation = async (locationData) => {\n  try {\n    const response = await api.post('/admin/locations', locationData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to create location');\n  }\n};\n\nexport const updateLocation = async (id, locationData) => {\n  try {\n    const response = await api.put(`/admin/locations/${id}`, locationData);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to update location');\n  }\n};\n\nexport const deleteLocation = async (id) => {\n  try {\n    const response = await api.delete(`/admin/locations/${id}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to delete location');\n  }\n};\n\n// ==================== ANALYTICS ====================\n\nexport const getRouteAnalytics = async (startDate, endDate) => {\n  try {\n    const response = await api.get(`/admin/analytics/routes?startDate=${startDate}&endDate=${endDate}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch route analytics');\n  }\n};\n\nexport const getRevenueAnalytics = async (startDate, endDate) => {\n  try {\n    const response = await api.get(`/admin/analytics/revenue?startDate=${startDate}&endDate=${endDate}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch revenue analytics');\n  }\n};\n\nexport const getOccupancyAnalytics = async (startDate, endDate) => {\n  try {\n    const response = await api.get(`/admin/analytics/occupancy?startDate=${startDate}&endDate=${endDate}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch occupancy analytics');\n  }\n};\n\n// ==================== UTILITY FUNCTIONS ====================\n\n// Format currency for display\nexport const formatCurrency = (amount) => {\n  return new Intl.NumberFormat('en-MY', {\n    style: 'currency',\n    currency: 'MYR',\n  }).format(amount);\n};\n\n// Format date for display\nexport const formatDate = (date) => {\n  return new Date(date).toLocaleDateString('en-MY');\n};\n\n// Format time for display\nexport const formatTime = (time) => {\n  return time;\n};\n\n// Calculate occupancy percentage\nexport const calculateOccupancy = (bookedSeats, totalSeats) => {\n  return (bookedSeats / totalSeats) * 100;\n};\n\n// Get occupancy color class based on percentage\nexport const getOccupancyColorClass = (percentage) => {\n  if (percentage >= 80) return 'bg-green-500';\n  if (percentage >= 50) return 'bg-blue-500';\n  if (percentage >= 30) return 'bg-yellow-500';\n  return 'bg-red-500';\n};\n\n// Error handler for API calls\nexport const handleApiError = (error, defaultMessage = 'An error occurred') => {\n  console.error(error);\n  return {\n    success: false,\n    message: error.message || defaultMessage,\n  };\n};\n\n// 获取热门行程\nexport const getPopularTrips = async (startDate, endDate, limit = 5) => {\n  try {\n    const response = await api.get(`/admin/analytics/popular-trips?startDate=${startDate}&endDate=${endDate}&limit=${limit}`);\n    return response;\n  } catch (error) {\n    return handleApiError(error, 'Failed to fetch popular trips');\n  }\n};\n\nexport default {\n  getAdminStats,\n  getDashboardStats,\n  getAnalyticsData,\n  getAllVehicles,\n  getVehicles,\n  createVehicle,\n  updateVehicle,\n  deleteVehicle,\n  getAllRoutes,\n  getRoutes,\n  getRouteById,\n  createRoute,\n  updateRoute,\n  deleteRoute,\n  getRouteStops,\n  getRoutePerformance,\n  getSchedulesByDate,\n  getSchedules,\n  getSchedulesByDateRange,\n  getTodaySchedules,\n  getTodaysSchedule,\n  createSchedule,\n  updateSchedule,\n  deleteSchedule,\n  addMoreTrips,\n  searchTrips,\n  getTripDetails,\n  getAllBookings,\n  getBookingById,\n  updateBookingStatus,\n  searchBookings,\n  getAllLocations,\n  getLocationsForRoutes,\n  createLocation,\n  updateLocation,\n  deleteLocation,\n  getRouteAnalytics,\n  getRevenueAnalytics,\n  getOccupancyAnalytics,\n  getPopularTrips\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}