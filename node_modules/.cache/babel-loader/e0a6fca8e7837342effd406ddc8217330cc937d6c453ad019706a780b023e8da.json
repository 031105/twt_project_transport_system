{"ast":null,"code":"var _s = $RefreshSig$();\n// 路由分析API服务\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// 请求助手函数\nconst apiCall = async (endpoint, options = {}) => {\n  _s();\n  const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n  const url = `${baseUrl}${endpoint}`;\n  const defaultOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n    }\n  };\n  const fetchOptions = {\n    ...defaultOptions,\n    ...options\n  };\n  try {\n    console.log(`API Call: ${fetchOptions.method} ${url}`);\n    const response = await fetch(url, fetchOptions);\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('API call failed:', errorText);\n      let errorMessage = `HTTP error! status: ${response.status}`;\n      try {\n        const errorJson = JSON.parse(errorText);\n        if (errorJson.message || errorJson.error) {\n          errorMessage = errorJson.message || errorJson.error;\n        }\n      } catch (e) {\n        if (errorText) errorMessage = errorText;\n      }\n      throw new Error(errorMessage);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('API call failed:', error);\n    // 当API调用失败时使用模拟数据\n    return useMockData(endpoint, options);\n  }\n};\n\n// 模拟数据处理函数 (API调用失败时使用)\n_s(apiCall, \"HGSSguUwuOvFDfn7ISIbiae8Ckk=\", false, function () {\n  return [useMockData];\n});\nconst useMockData = (endpoint, options) => {\n  console.warn('Using mock data fallback for:', endpoint);\n\n  // 从URL中提取routeId\n  const routeIdMatch = endpoint.match(/\\/routes\\/([^\\/]+)/);\n  const routeId = routeIdMatch ? routeIdMatch[1] : null;\n  if (endpoint.includes('occupancy')) {\n    return {\n      success: true,\n      data: {\n        occupancyRate: 85,\n        totalTrips: 12\n      }\n    };\n  }\n  if (endpoint.includes('travel-time')) {\n    const queryParams = new URLSearchParams(options.queryParams || {});\n    const trafficFactor = parseFloat(queryParams.get('trafficFactor') || 1.0);\n    const weatherConditions = queryParams.get('weatherConditions') || 'clear';\n    let baseTravelTime = 5.0;\n\n    // 交通因素调整\n    baseTravelTime *= trafficFactor;\n\n    // 天气调整\n    const weatherMultipliers = {\n      'clear': 1.0,\n      'light_rain': 1.15,\n      'heavy_rain': 1.35,\n      'fog': 1.25,\n      'storm': 1.50\n    };\n    baseTravelTime *= weatherMultipliers[weatherConditions] || 1.0;\n    return {\n      success: true,\n      data: {\n        travelTimeHours: parseFloat(baseTravelTime.toFixed(2)),\n        baseTravelTimeHours: 5.0,\n        stopTimeHours: 0.5,\n        trafficFactor,\n        weatherConditions,\n        weatherMultiplier: weatherMultipliers[weatherConditions] || 1.0\n      }\n    };\n  }\n  if (endpoint.includes('emissions')) {\n    const queryParams = new URLSearchParams(options.queryParams || {});\n    const vehicleType = queryParams.get('vehicleType') || 'standard';\n\n    // 不同车型的排放系数\n    const emissionFactors = {\n      'standard': 0.68,\n      'luxury': 0.85,\n      'mini': 0.45\n    };\n    const factor = emissionFactors[vehicleType] || 0.68;\n    // 假设平均距离为350km\n    const distance = 350;\n    const co2Emissions = distance * factor;\n    return {\n      success: true,\n      data: {\n        co2Emissions: parseFloat(co2Emissions.toFixed(2)),\n        distanceKm: distance,\n        vehicleType,\n        emissionFactor: factor\n      }\n    };\n  }\n  if (endpoint.includes('dynamic-price')) {\n    const queryParams = new URLSearchParams(options.queryParams || {});\n    const date = queryParams.get('date') || new Date().toISOString().split('T')[0];\n    const availableSeats = parseInt(queryParams.get('availableSeats') || 20);\n    const totalSeats = parseInt(queryParams.get('totalSeats') || 40);\n    const basePrice = 45.0;\n    let dynamicPrice = basePrice;\n\n    // 日期基础定价\n    const tripDate = new Date(date);\n    const dayOfWeek = tripDate.getDay();\n    const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;\n    const isHoliday = false;\n    if (isWeekend) {\n      dynamicPrice *= 1.15;\n    }\n    if (isHoliday) {\n      dynamicPrice *= 1.25;\n    }\n\n    // 基于需求的定价\n    const occupancyRate = 1 - availableSeats / totalSeats;\n    if (occupancyRate > 0.8) {\n      dynamicPrice *= 1.20;\n    } else if (occupancyRate > 0.6) {\n      dynamicPrice *= 1.10;\n    } else if (occupancyRate < 0.3) {\n      dynamicPrice *= 0.90;\n    }\n\n    // 提前预订折扣\n    const now = new Date();\n    const daysAdvance = Math.ceil((tripDate - now) / (1000 * 60 * 60 * 24));\n    if (daysAdvance > 14) {\n      dynamicPrice *= 0.85;\n    } else if (daysAdvance < 2) {\n      dynamicPrice *= 1.30;\n    }\n    const operationalCost = 18.0;\n    const profitMargin = 0.25;\n    const minPrice = operationalCost * (1 + profitMargin);\n    const finalPrice = Math.max(dynamicPrice, minPrice);\n    return {\n      success: true,\n      data: {\n        basePrice: basePrice,\n        dynamicPrice: parseFloat(finalPrice.toFixed(2)),\n        factors: {\n          isWeekend,\n          isHoliday,\n          occupancyRate: parseFloat((occupancyRate * 100).toFixed(1)),\n          daysAdvance,\n          operationalCost,\n          minPrice: parseFloat(minPrice.toFixed(2))\n        }\n      }\n    };\n  }\n  return {\n    success: false,\n    message: 'No mock data available for this endpoint'\n  };\n};\n\n// 导出API函数\nexport const calculateOccupancyRate = async trip => {\n  try {\n    if (!trip || !trip.route || !trip.route.id) {\n      console.error('Invalid trip object provided to calculateOccupancyRate');\n      return 0;\n    }\n    const routeId = trip.route.id;\n    const response = await apiCall(`/admin/routes/${routeId}/occupancy`);\n    if (response && response.success && response.data) {\n      return response.data.occupancyRate;\n    }\n\n    // 如果API调用失败或没有数据，计算单个行程的占用率\n    if (trip.totalSeats && trip.availableSeats) {\n      const occupiedSeats = trip.totalSeats - trip.availableSeats;\n      return parseFloat((occupiedSeats / trip.totalSeats * 100).toFixed(1));\n    }\n    return 0;\n  } catch (error) {\n    console.error('Error calculating occupancy rate:', error);\n    // 如果出错，使用静态计算\n    if (trip.totalSeats && trip.availableSeats) {\n      const occupiedSeats = trip.totalSeats - trip.availableSeats;\n      return parseFloat((occupiedSeats / trip.totalSeats * 100).toFixed(1));\n    }\n    return 0;\n  }\n};\nexport const calculateTravelTime = async (route, trafficFactor = 1.0, weatherConditions = 'clear') => {\n  try {\n    if (!route || !route.id) {\n      console.error('Invalid route object provided to calculateTravelTime');\n      return route.durationHours || 0;\n    }\n    const params = new URLSearchParams({\n      trafficFactor: trafficFactor.toString(),\n      weatherConditions\n    });\n    const response = await apiCall(`/admin/routes/${route.id}/travel-time?${params.toString()}`, {\n      queryParams: params\n    });\n    if (response && response.success && response.data) {\n      return response.data.travelTimeHours;\n    }\n\n    // 如果API调用失败，使用路由中的基础时间\n    return route.durationHours || 0;\n  } catch (error) {\n    console.error('Error calculating travel time:', error);\n    // 如果出错，使用路由中的基础时间\n    return route.durationHours || 0;\n  }\n};\nexport const calculateCO2Emissions = async (route, vehicleType) => {\n  try {\n    if (!route || !route.id) {\n      console.error('Invalid route object provided to calculateCO2Emissions');\n      return route.distanceKm * 0.68; // 默认排放系数\n    }\n    const vehicleTypeMap = {\n      'vt-1': 'standard',\n      'vt-2': 'luxury',\n      'vt-3': 'mini'\n    };\n    const mappedVehicleType = vehicleTypeMap[vehicleType] || 'standard';\n    const params = new URLSearchParams({\n      vehicleType: mappedVehicleType\n    });\n    const response = await apiCall(`/admin/routes/${route.id}/emissions?${params.toString()}`, {\n      queryParams: params\n    });\n    if (response && response.success && response.data) {\n      return response.data.co2Emissions;\n    }\n\n    // 如果API调用失败，使用静态计算\n    const emissionFactors = {\n      'vt-1': 0.68,\n      // 标准巴士\n      'vt-2': 0.85,\n      // 豪华巴士\n      'vt-3': 0.45 // 小型客车\n    };\n    const factor = emissionFactors[vehicleType] || 0.68;\n    return route.distanceKm * factor;\n  } catch (error) {\n    console.error('Error calculating CO2 emissions:', error);\n    // 如果出错，使用静态计算\n    const emissionFactors = {\n      'vt-1': 0.68,\n      'vt-2': 0.85,\n      'vt-3': 0.45\n    };\n    const factor = emissionFactors[vehicleType] || 0.68;\n    return route.distanceKm * factor;\n  }\n};\nexport const calculateDynamicPrice = async (route, date, availableSeats, totalSeats) => {\n  try {\n    if (!route || !route.id) {\n      console.error('Invalid route object provided to calculateDynamicPrice');\n      return route.basePrice || 0;\n    }\n    const formattedDate = date instanceof Date ? date.toISOString().split('T')[0] : new Date().toISOString().split('T')[0];\n    const params = new URLSearchParams({\n      date: formattedDate,\n      availableSeats: availableSeats.toString(),\n      totalSeats: totalSeats.toString()\n    });\n    const response = await apiCall(`/admin/routes/${route.id}/dynamic-price?${params.toString()}`, {\n      queryParams: params\n    });\n    if (response && response.success && response.data) {\n      return response.data.dynamicPrice;\n    }\n\n    // 如果API调用失败，使用路由中的基础价格\n    return route.basePrice || 0;\n  } catch (error) {\n    console.error('Error calculating dynamic price:', error);\n    // 如果出错，使用路由中的基础价格\n    return route.basePrice || 0;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiCall","endpoint","options","_s","baseUrl","url","defaultOptions","method","headers","localStorage","getItem","fetchOptions","console","log","response","fetch","ok","errorText","text","error","errorMessage","status","errorJson","JSON","parse","message","e","Error","data","json","useMockData","warn","routeIdMatch","match","routeId","includes","success","occupancyRate","totalTrips","queryParams","URLSearchParams","trafficFactor","parseFloat","get","weatherConditions","baseTravelTime","weatherMultipliers","travelTimeHours","toFixed","baseTravelTimeHours","stopTimeHours","weatherMultiplier","vehicleType","emissionFactors","factor","distance","co2Emissions","distanceKm","emissionFactor","date","Date","toISOString","split","availableSeats","parseInt","totalSeats","basePrice","dynamicPrice","tripDate","dayOfWeek","getDay","isWeekend","isHoliday","now","daysAdvance","Math","ceil","operationalCost","profitMargin","minPrice","finalPrice","max","factors","calculateOccupancyRate","trip","route","id","occupiedSeats","calculateTravelTime","durationHours","params","toString","calculateCO2Emissions","vehicleTypeMap","mappedVehicleType","calculateDynamicPrice","formattedDate"],"sources":["/Users/gohshunda/TWT-Transport-Booking/src/services/routeAnalysisApi.js"],"sourcesContent":["// 路由分析API服务\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// 请求助手函数\nconst apiCall = async (endpoint, options = {}) => {\n  const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n  const url = `${baseUrl}${endpoint}`;\n  \n  const defaultOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n    }\n  };\n  \n  const fetchOptions = {\n    ...defaultOptions,\n    ...options,\n  };\n  \n  try {\n    console.log(`API Call: ${fetchOptions.method} ${url}`);\n    const response = await fetch(url, fetchOptions);\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('API call failed:', errorText);\n      \n      let errorMessage = `HTTP error! status: ${response.status}`;\n      try {\n        const errorJson = JSON.parse(errorText);\n        if (errorJson.message || errorJson.error) {\n          errorMessage = errorJson.message || errorJson.error;\n        }\n      } catch (e) {\n        if (errorText) errorMessage = errorText;\n      }\n      \n      throw new Error(errorMessage);\n    }\n    \n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('API call failed:', error);\n    // 当API调用失败时使用模拟数据\n    return useMockData(endpoint, options);\n  }\n};\n\n// 模拟数据处理函数 (API调用失败时使用)\nconst useMockData = (endpoint, options) => {\n  console.warn('Using mock data fallback for:', endpoint);\n  \n  // 从URL中提取routeId\n  const routeIdMatch = endpoint.match(/\\/routes\\/([^\\/]+)/);\n  const routeId = routeIdMatch ? routeIdMatch[1] : null;\n  \n  if (endpoint.includes('occupancy')) {\n    return {\n      success: true,\n      data: {\n        occupancyRate: 85,\n        totalTrips: 12\n      }\n    };\n  }\n  \n  if (endpoint.includes('travel-time')) {\n    const queryParams = new URLSearchParams(options.queryParams || {});\n    const trafficFactor = parseFloat(queryParams.get('trafficFactor') || 1.0);\n    const weatherConditions = queryParams.get('weatherConditions') || 'clear';\n    \n    let baseTravelTime = 5.0;\n    \n    // 交通因素调整\n    baseTravelTime *= trafficFactor;\n    \n    // 天气调整\n    const weatherMultipliers = {\n      'clear': 1.0,\n      'light_rain': 1.15,\n      'heavy_rain': 1.35,\n      'fog': 1.25,\n      'storm': 1.50\n    };\n    \n    baseTravelTime *= weatherMultipliers[weatherConditions] || 1.0;\n    \n    return {\n      success: true,\n      data: {\n        travelTimeHours: parseFloat(baseTravelTime.toFixed(2)),\n        baseTravelTimeHours: 5.0,\n        stopTimeHours: 0.5,\n        trafficFactor,\n        weatherConditions,\n        weatherMultiplier: weatherMultipliers[weatherConditions] || 1.0\n      }\n    };\n  }\n  \n  if (endpoint.includes('emissions')) {\n    const queryParams = new URLSearchParams(options.queryParams || {});\n    const vehicleType = queryParams.get('vehicleType') || 'standard';\n    \n    // 不同车型的排放系数\n    const emissionFactors = {\n      'standard': 0.68,\n      'luxury': 0.85,\n      'mini': 0.45\n    };\n    \n    const factor = emissionFactors[vehicleType] || 0.68;\n    // 假设平均距离为350km\n    const distance = 350;\n    const co2Emissions = distance * factor;\n    \n    return {\n      success: true,\n      data: {\n        co2Emissions: parseFloat(co2Emissions.toFixed(2)),\n        distanceKm: distance,\n        vehicleType,\n        emissionFactor: factor\n      }\n    };\n  }\n  \n  if (endpoint.includes('dynamic-price')) {\n    const queryParams = new URLSearchParams(options.queryParams || {});\n    const date = queryParams.get('date') || new Date().toISOString().split('T')[0];\n    const availableSeats = parseInt(queryParams.get('availableSeats') || 20);\n    const totalSeats = parseInt(queryParams.get('totalSeats') || 40);\n    \n    const basePrice = 45.0;\n    let dynamicPrice = basePrice;\n    \n    // 日期基础定价\n    const tripDate = new Date(date);\n    const dayOfWeek = tripDate.getDay();\n    const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;\n    const isHoliday = false;\n    \n    if (isWeekend) {\n      dynamicPrice *= 1.15;\n    }\n    \n    if (isHoliday) {\n      dynamicPrice *= 1.25;\n    }\n    \n    // 基于需求的定价\n    const occupancyRate = 1 - (availableSeats / totalSeats);\n    if (occupancyRate > 0.8) {\n      dynamicPrice *= 1.20;\n    } else if (occupancyRate > 0.6) {\n      dynamicPrice *= 1.10;\n    } else if (occupancyRate < 0.3) {\n      dynamicPrice *= 0.90;\n    }\n    \n    // 提前预订折扣\n    const now = new Date();\n    const daysAdvance = Math.ceil((tripDate - now) / (1000 * 60 * 60 * 24));\n    if (daysAdvance > 14) {\n      dynamicPrice *= 0.85;\n    } else if (daysAdvance < 2) {\n      dynamicPrice *= 1.30;\n    }\n    \n    const operationalCost = 18.0;\n    const profitMargin = 0.25;\n    const minPrice = operationalCost * (1 + profitMargin);\n    \n    const finalPrice = Math.max(dynamicPrice, minPrice);\n    \n    return {\n      success: true,\n      data: {\n        basePrice: basePrice,\n        dynamicPrice: parseFloat(finalPrice.toFixed(2)),\n        factors: {\n          isWeekend,\n          isHoliday,\n          occupancyRate: parseFloat((occupancyRate * 100).toFixed(1)),\n          daysAdvance,\n          operationalCost,\n          minPrice: parseFloat(minPrice.toFixed(2))\n        }\n      }\n    };\n  }\n  \n  return {\n    success: false,\n    message: 'No mock data available for this endpoint'\n  };\n};\n\n// 导出API函数\nexport const calculateOccupancyRate = async (trip) => {\n  try {\n    if (!trip || !trip.route || !trip.route.id) {\n      console.error('Invalid trip object provided to calculateOccupancyRate');\n      return 0;\n    }\n    \n    const routeId = trip.route.id;\n    const response = await apiCall(`/admin/routes/${routeId}/occupancy`);\n    \n    if (response && response.success && response.data) {\n      return response.data.occupancyRate;\n    }\n    \n    // 如果API调用失败或没有数据，计算单个行程的占用率\n    if (trip.totalSeats && trip.availableSeats) {\n      const occupiedSeats = trip.totalSeats - trip.availableSeats;\n      return parseFloat(((occupiedSeats / trip.totalSeats) * 100).toFixed(1));\n    }\n    \n    return 0;\n  } catch (error) {\n    console.error('Error calculating occupancy rate:', error);\n    // 如果出错，使用静态计算\n    if (trip.totalSeats && trip.availableSeats) {\n      const occupiedSeats = trip.totalSeats - trip.availableSeats;\n      return parseFloat(((occupiedSeats / trip.totalSeats) * 100).toFixed(1));\n    }\n    return 0;\n  }\n};\n\nexport const calculateTravelTime = async (route, trafficFactor = 1.0, weatherConditions = 'clear') => {\n  try {\n    if (!route || !route.id) {\n      console.error('Invalid route object provided to calculateTravelTime');\n      return route.durationHours || 0;\n    }\n    \n    const params = new URLSearchParams({\n      trafficFactor: trafficFactor.toString(),\n      weatherConditions\n    });\n    \n    const response = await apiCall(`/admin/routes/${route.id}/travel-time?${params.toString()}`, {\n      queryParams: params\n    });\n    \n    if (response && response.success && response.data) {\n      return response.data.travelTimeHours;\n    }\n    \n    // 如果API调用失败，使用路由中的基础时间\n    return route.durationHours || 0;\n  } catch (error) {\n    console.error('Error calculating travel time:', error);\n    // 如果出错，使用路由中的基础时间\n    return route.durationHours || 0;\n  }\n};\n\nexport const calculateCO2Emissions = async (route, vehicleType) => {\n  try {\n    if (!route || !route.id) {\n      console.error('Invalid route object provided to calculateCO2Emissions');\n      return route.distanceKm * 0.68; // 默认排放系数\n    }\n    \n    const vehicleTypeMap = {\n      'vt-1': 'standard',\n      'vt-2': 'luxury',\n      'vt-3': 'mini'\n    };\n    \n    const mappedVehicleType = vehicleTypeMap[vehicleType] || 'standard';\n    \n    const params = new URLSearchParams({\n      vehicleType: mappedVehicleType\n    });\n    \n    const response = await apiCall(`/admin/routes/${route.id}/emissions?${params.toString()}`, {\n      queryParams: params\n    });\n    \n    if (response && response.success && response.data) {\n      return response.data.co2Emissions;\n    }\n    \n    // 如果API调用失败，使用静态计算\n    const emissionFactors = {\n      'vt-1': 0.68, // 标准巴士\n      'vt-2': 0.85, // 豪华巴士\n      'vt-3': 0.45  // 小型客车\n    };\n    \n    const factor = emissionFactors[vehicleType] || 0.68;\n    return route.distanceKm * factor;\n  } catch (error) {\n    console.error('Error calculating CO2 emissions:', error);\n    // 如果出错，使用静态计算\n    const emissionFactors = {\n      'vt-1': 0.68,\n      'vt-2': 0.85,\n      'vt-3': 0.45\n    };\n    \n    const factor = emissionFactors[vehicleType] || 0.68;\n    return route.distanceKm * factor;\n  }\n};\n\nexport const calculateDynamicPrice = async (route, date, availableSeats, totalSeats) => {\n  try {\n    if (!route || !route.id) {\n      console.error('Invalid route object provided to calculateDynamicPrice');\n      return route.basePrice || 0;\n    }\n    \n    const formattedDate = date instanceof Date \n      ? date.toISOString().split('T')[0]\n      : new Date().toISOString().split('T')[0];\n    \n    const params = new URLSearchParams({\n      date: formattedDate,\n      availableSeats: availableSeats.toString(),\n      totalSeats: totalSeats.toString()\n    });\n    \n    const response = await apiCall(`/admin/routes/${route.id}/dynamic-price?${params.toString()}`, {\n      queryParams: params\n    });\n    \n    if (response && response.success && response.data) {\n      return response.data.dynamicPrice;\n    }\n    \n    // 如果API调用失败，使用路由中的基础价格\n    return route.basePrice || 0;\n  } catch (error) {\n    console.error('Error calculating dynamic price:', error);\n    // 如果出错，使用路由中的基础价格\n    return route.basePrice || 0;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}