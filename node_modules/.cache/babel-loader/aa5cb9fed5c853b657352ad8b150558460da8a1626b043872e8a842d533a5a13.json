{"ast":null,"code":"var _jsxFileName = \"/Users/gohshunda/TWT-Transport-Booking/src/context/AppContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { mockUsers, mockApi } from '../data/mockData';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  // User & Auth\n  currentUser: null,\n  isAuthenticated: false,\n  isLoading: false,\n  // Search & Booking\n  searchParams: {\n    origin: '',\n    destination: '',\n    date: ''\n  },\n  searchResults: [],\n  selectedTrip: null,\n  selectedSeat: null,\n  // Booking Process\n  bookingInProgress: null,\n  bookingHistory: [],\n  // UI State\n  sidebarOpen: false,\n  notifications: [],\n  // Error handling\n  error: null\n};\n\n// Action types\nexport const ACTIONS = {\n  // Auth actions\n  LOGIN_START: 'LOGIN_START',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\n  LOGOUT: 'LOGOUT',\n  // Search actions\n  SET_SEARCH_PARAMS: 'SET_SEARCH_PARAMS',\n  SEARCH_TRIPS_START: 'SEARCH_TRIPS_START',\n  SEARCH_TRIPS_SUCCESS: 'SEARCH_TRIPS_SUCCESS',\n  SEARCH_TRIPS_FAILURE: 'SEARCH_TRIPS_FAILURE',\n  // Booking actions\n  SELECT_TRIP: 'SELECT_TRIP',\n  SELECT_SEAT: 'SELECT_SEAT',\n  CREATE_BOOKING_START: 'CREATE_BOOKING_START',\n  CREATE_BOOKING_SUCCESS: 'CREATE_BOOKING_SUCCESS',\n  CREATE_BOOKING_FAILURE: 'CREATE_BOOKING_FAILURE',\n  LOAD_BOOKING_HISTORY: 'LOAD_BOOKING_HISTORY',\n  // UI actions\n  TOGGLE_SIDEBAR: 'TOGGLE_SIDEBAR',\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\n  REMOVE_NOTIFICATION: 'REMOVE_NOTIFICATION',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  SET_ERROR: 'SET_ERROR'\n};\n\n// Reducer function\nconst appReducer = (state, action) => {\n  switch (action.type) {\n    case ACTIONS.LOGIN_START:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    case ACTIONS.LOGIN_SUCCESS:\n      return {\n        ...state,\n        currentUser: action.payload,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      };\n    case ACTIONS.LOGIN_FAILURE:\n      return {\n        ...state,\n        currentUser: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: action.payload\n      };\n    case ACTIONS.LOGOUT:\n      return {\n        ...state,\n        currentUser: null,\n        isAuthenticated: false,\n        bookingHistory: [],\n        bookingInProgress: null,\n        selectedTrip: null,\n        selectedSeat: null\n      };\n    case ACTIONS.SET_SEARCH_PARAMS:\n      return {\n        ...state,\n        searchParams: {\n          ...state.searchParams,\n          ...action.payload\n        }\n      };\n    case ACTIONS.SEARCH_TRIPS_START:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    case ACTIONS.SEARCH_TRIPS_SUCCESS:\n      return {\n        ...state,\n        searchResults: action.payload,\n        isLoading: false,\n        error: null\n      };\n    case ACTIONS.SEARCH_TRIPS_FAILURE:\n      return {\n        ...state,\n        searchResults: [],\n        isLoading: false,\n        error: action.payload\n      };\n    case ACTIONS.SELECT_TRIP:\n      return {\n        ...state,\n        selectedTrip: action.payload,\n        selectedSeat: null // Reset seat selection when trip changes\n      };\n    case ACTIONS.SELECT_SEAT:\n      return {\n        ...state,\n        selectedSeat: action.payload\n      };\n    case ACTIONS.CREATE_BOOKING_START:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    case ACTIONS.CREATE_BOOKING_SUCCESS:\n      return {\n        ...state,\n        bookingInProgress: action.payload,\n        isLoading: false,\n        error: null\n      };\n    case ACTIONS.CREATE_BOOKING_FAILURE:\n      return {\n        ...state,\n        bookingInProgress: null,\n        isLoading: false,\n        error: action.payload\n      };\n    case ACTIONS.LOAD_BOOKING_HISTORY:\n      return {\n        ...state,\n        bookingHistory: action.payload\n      };\n    case ACTIONS.TOGGLE_SIDEBAR:\n      return {\n        ...state,\n        sidebarOpen: !state.sidebarOpen\n      };\n    case ACTIONS.ADD_NOTIFICATION:\n      return {\n        ...state,\n        notifications: [...state.notifications, {\n          id: Date.now(),\n          ...action.payload\n        }]\n      };\n    case ACTIONS.REMOVE_NOTIFICATION:\n      return {\n        ...state,\n        notifications: state.notifications.filter(n => n.id !== action.payload)\n      };\n    case ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AppContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  // Auto-login from localStorage on app start\n  useEffect(() => {\n    const savedUser = localStorage.getItem('currentUser');\n    if (savedUser) {\n      try {\n        const user = JSON.parse(savedUser);\n        dispatch({\n          type: ACTIONS.LOGIN_SUCCESS,\n          payload: user\n        });\n      } catch (error) {\n        localStorage.removeItem('currentUser');\n      }\n    }\n  }, []);\n\n  // Load user bookings when user logs in\n  useEffect(() => {\n    if (state.isAuthenticated && state.currentUser) {\n      loadBookingHistory();\n    }\n  }, [state.isAuthenticated, state.currentUser]);\n\n  // Action creators\n  const login = async (email, password) => {\n    dispatch({\n      type: ACTIONS.LOGIN_START\n    });\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Find user in mock data\n      const user = mockUsers.find(u => u.email === email);\n      if (!user || password !== 'password123') {\n        // Mock password for all users\n        throw new Error('Invalid email or password');\n      }\n\n      // Save to localStorage\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      dispatch({\n        type: ACTIONS.LOGIN_SUCCESS,\n        payload: user\n      });\n      addNotification({\n        type: 'success',\n        message: `Welcome back, ${user.firstName}!`\n      });\n      return user;\n    } catch (error) {\n      dispatch({\n        type: ACTIONS.LOGIN_FAILURE,\n        payload: error.message\n      });\n      addNotification({\n        type: 'error',\n        message: error.message\n      });\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('currentUser');\n    dispatch({\n      type: ACTIONS.LOGOUT\n    });\n    addNotification({\n      type: 'success',\n      message: 'You have been logged out successfully'\n    });\n  };\n  const searchTrips = async searchParams => {\n    dispatch({\n      type: ACTIONS.SEARCH_TRIPS_START\n    });\n    try {\n      const results = await mockApi.searchTrips(searchParams);\n      dispatch({\n        type: ACTIONS.SEARCH_TRIPS_SUCCESS,\n        payload: results\n      });\n      dispatch({\n        type: ACTIONS.SET_SEARCH_PARAMS,\n        payload: searchParams\n      });\n      return results;\n    } catch (error) {\n      dispatch({\n        type: ACTIONS.SEARCH_TRIPS_FAILURE,\n        payload: error.message\n      });\n      throw error;\n    }\n  };\n  const loadAllTrips = async () => {\n    dispatch({\n      type: ACTIONS.SEARCH_TRIPS_START\n    });\n    try {\n      const results = await mockApi.getAllTrips();\n      dispatch({\n        type: ACTIONS.SEARCH_TRIPS_SUCCESS,\n        payload: results\n      });\n      dispatch({\n        type: ACTIONS.SET_SEARCH_PARAMS,\n        payload: {\n          origin: '',\n          destination: '',\n          date: ''\n        }\n      });\n      return results;\n    } catch (error) {\n      dispatch({\n        type: ACTIONS.SEARCH_TRIPS_FAILURE,\n        payload: error.message\n      });\n      throw error;\n    }\n  };\n  const selectTrip = async trip => {\n    try {\n      const tripDetails = await mockApi.getTripDetails(trip.id);\n      dispatch({\n        type: ACTIONS.SELECT_TRIP,\n        payload: tripDetails\n      });\n      return tripDetails;\n    } catch (error) {\n      addNotification({\n        type: 'error',\n        message: 'Failed to load trip details'\n      });\n      throw error;\n    }\n  };\n  const selectSeat = seat => {\n    dispatch({\n      type: ACTIONS.SELECT_SEAT,\n      payload: seat\n    });\n  };\n  const createBooking = async bookingData => {\n    dispatch({\n      type: ACTIONS.CREATE_BOOKING_START\n    });\n    try {\n      const booking = await mockApi.createBooking(bookingData);\n      dispatch({\n        type: ACTIONS.CREATE_BOOKING_SUCCESS,\n        payload: booking\n      });\n      addNotification({\n        type: 'success',\n        message: `Booking created successfully! Reference: ${booking.bookingReference}`\n      });\n      return booking;\n    } catch (error) {\n      dispatch({\n        type: ACTIONS.CREATE_BOOKING_FAILURE,\n        payload: error.message\n      });\n      addNotification({\n        type: 'error',\n        message: 'Failed to create booking. Please try again.'\n      });\n      throw error;\n    }\n  };\n  const processPayment = async paymentData => {\n    try {\n      const payment = await mockApi.processPayment(paymentData);\n      if (payment.status === 'completed') {\n        addNotification({\n          type: 'success',\n          message: 'Payment completed successfully!'\n        });\n\n        // Reload booking history\n        loadBookingHistory();\n      } else {\n        addNotification({\n          type: 'error',\n          message: payment.failureReason || 'Payment failed. Please try again.'\n        });\n      }\n      return payment;\n    } catch (error) {\n      addNotification({\n        type: 'error',\n        message: 'Payment processing failed. Please try again.'\n      });\n      throw error;\n    }\n  };\n  const loadBookingHistory = async () => {\n    if (!state.currentUser) return;\n    try {\n      const bookings = await mockApi.getUserBookings(state.currentUser.id);\n      dispatch({\n        type: ACTIONS.LOAD_BOOKING_HISTORY,\n        payload: bookings\n      });\n    } catch (error) {\n      console.error('Failed to load booking history:', error);\n    }\n  };\n  const addNotification = notification => {\n    const notificationWithId = {\n      id: Date.now(),\n      ...notification\n    };\n    dispatch({\n      type: ACTIONS.ADD_NOTIFICATION,\n      payload: notificationWithId\n    });\n\n    // Auto-remove notification after 5 seconds\n    setTimeout(() => {\n      dispatch({\n        type: ACTIONS.REMOVE_NOTIFICATION,\n        payload: notificationWithId.id\n      });\n    }, 5000);\n  };\n  const removeNotification = id => {\n    dispatch({\n      type: ACTIONS.REMOVE_NOTIFICATION,\n      payload: id\n    });\n  };\n  const clearError = () => {\n    dispatch({\n      type: ACTIONS.CLEAR_ERROR\n    });\n  };\n  const toggleSidebar = () => {\n    dispatch({\n      type: ACTIONS.TOGGLE_SIDEBAR\n    });\n  };\n\n  // Context value\n  const contextValue = {\n    // State\n    ...state,\n    // Actions\n    login,\n    logout,\n    searchTrips,\n    loadAllTrips,\n    selectTrip,\n    selectSeat,\n    createBooking,\n    processPayment,\n    loadBookingHistory,\n    addNotification,\n    removeNotification,\n    clearError,\n    toggleSidebar\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 433,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use context\n_s(AppProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = AppProvider;\nexport const useApp = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n_s2(useApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","mockUsers","mockApi","jsxDEV","_jsxDEV","initialState","currentUser","isAuthenticated","isLoading","searchParams","origin","destination","date","searchResults","selectedTrip","selectedSeat","bookingInProgress","bookingHistory","sidebarOpen","notifications","error","ACTIONS","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","SET_SEARCH_PARAMS","SEARCH_TRIPS_START","SEARCH_TRIPS_SUCCESS","SEARCH_TRIPS_FAILURE","SELECT_TRIP","SELECT_SEAT","CREATE_BOOKING_START","CREATE_BOOKING_SUCCESS","CREATE_BOOKING_FAILURE","LOAD_BOOKING_HISTORY","TOGGLE_SIDEBAR","ADD_NOTIFICATION","REMOVE_NOTIFICATION","CLEAR_ERROR","SET_ERROR","appReducer","state","action","type","payload","id","Date","now","filter","n","AppContext","AppProvider","children","_s","dispatch","savedUser","localStorage","getItem","user","JSON","parse","removeItem","loadBookingHistory","login","email","password","Promise","resolve","setTimeout","find","u","Error","setItem","stringify","addNotification","message","firstName","logout","searchTrips","results","loadAllTrips","getAllTrips","selectTrip","trip","tripDetails","getTripDetails","selectSeat","seat","createBooking","bookingData","booking","bookingReference","processPayment","paymentData","payment","status","failureReason","bookings","getUserBookings","console","notification","notificationWithId","removeNotification","clearError","toggleSidebar","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useApp","_s2","context","$RefreshReg$"],"sources":["/Users/gohshunda/TWT-Transport-Booking/src/context/AppContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { mockUsers, mockApi } from '../data/mockData';\n\n// Initial state\nconst initialState = {\n  // User & Auth\n  currentUser: null,\n  isAuthenticated: false,\n  isLoading: false,\n  \n  // Search & Booking\n  searchParams: {\n    origin: '',\n    destination: '',\n    date: ''\n  },\n  searchResults: [],\n  selectedTrip: null,\n  selectedSeat: null,\n  \n  // Booking Process\n  bookingInProgress: null,\n  bookingHistory: [],\n  \n  // UI State\n  sidebarOpen: false,\n  notifications: [],\n  \n  // Error handling\n  error: null\n};\n\n// Action types\nexport const ACTIONS = {\n  // Auth actions\n  LOGIN_START: 'LOGIN_START',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\n  LOGOUT: 'LOGOUT',\n  \n  // Search actions\n  SET_SEARCH_PARAMS: 'SET_SEARCH_PARAMS',\n  SEARCH_TRIPS_START: 'SEARCH_TRIPS_START',\n  SEARCH_TRIPS_SUCCESS: 'SEARCH_TRIPS_SUCCESS',\n  SEARCH_TRIPS_FAILURE: 'SEARCH_TRIPS_FAILURE',\n  \n  // Booking actions\n  SELECT_TRIP: 'SELECT_TRIP',\n  SELECT_SEAT: 'SELECT_SEAT',\n  CREATE_BOOKING_START: 'CREATE_BOOKING_START',\n  CREATE_BOOKING_SUCCESS: 'CREATE_BOOKING_SUCCESS',\n  CREATE_BOOKING_FAILURE: 'CREATE_BOOKING_FAILURE',\n  LOAD_BOOKING_HISTORY: 'LOAD_BOOKING_HISTORY',\n  \n  // UI actions\n  TOGGLE_SIDEBAR: 'TOGGLE_SIDEBAR',\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\n  REMOVE_NOTIFICATION: 'REMOVE_NOTIFICATION',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  SET_ERROR: 'SET_ERROR'\n};\n\n// Reducer function\nconst appReducer = (state, action) => {\n  switch (action.type) {\n    case ACTIONS.LOGIN_START:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n      \n    case ACTIONS.LOGIN_SUCCESS:\n      return {\n        ...state,\n        currentUser: action.payload,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      };\n      \n    case ACTIONS.LOGIN_FAILURE:\n      return {\n        ...state,\n        currentUser: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: action.payload\n      };\n      \n    case ACTIONS.LOGOUT:\n      return {\n        ...state,\n        currentUser: null,\n        isAuthenticated: false,\n        bookingHistory: [],\n        bookingInProgress: null,\n        selectedTrip: null,\n        selectedSeat: null\n      };\n      \n    case ACTIONS.SET_SEARCH_PARAMS:\n      return {\n        ...state,\n        searchParams: { ...state.searchParams, ...action.payload }\n      };\n      \n    case ACTIONS.SEARCH_TRIPS_START:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n      \n    case ACTIONS.SEARCH_TRIPS_SUCCESS:\n      return {\n        ...state,\n        searchResults: action.payload,\n        isLoading: false,\n        error: null\n      };\n      \n    case ACTIONS.SEARCH_TRIPS_FAILURE:\n      return {\n        ...state,\n        searchResults: [],\n        isLoading: false,\n        error: action.payload\n      };\n      \n    case ACTIONS.SELECT_TRIP:\n      return {\n        ...state,\n        selectedTrip: action.payload,\n        selectedSeat: null // Reset seat selection when trip changes\n      };\n      \n    case ACTIONS.SELECT_SEAT:\n      return {\n        ...state,\n        selectedSeat: action.payload\n      };\n      \n    case ACTIONS.CREATE_BOOKING_START:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n      \n    case ACTIONS.CREATE_BOOKING_SUCCESS:\n      return {\n        ...state,\n        bookingInProgress: action.payload,\n        isLoading: false,\n        error: null\n      };\n      \n    case ACTIONS.CREATE_BOOKING_FAILURE:\n      return {\n        ...state,\n        bookingInProgress: null,\n        isLoading: false,\n        error: action.payload\n      };\n      \n    case ACTIONS.LOAD_BOOKING_HISTORY:\n      return {\n        ...state,\n        bookingHistory: action.payload\n      };\n      \n    case ACTIONS.TOGGLE_SIDEBAR:\n      return {\n        ...state,\n        sidebarOpen: !state.sidebarOpen\n      };\n      \n    case ACTIONS.ADD_NOTIFICATION:\n      return {\n        ...state,\n        notifications: [...state.notifications, { id: Date.now(), ...action.payload }]\n      };\n      \n    case ACTIONS.REMOVE_NOTIFICATION:\n      return {\n        ...state,\n        notifications: state.notifications.filter(n => n.id !== action.payload)\n      };\n      \n    case ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n      \n    case ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n      \n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AppContext = createContext();\n\n// Provider component\nexport const AppProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  \n  // Auto-login from localStorage on app start\n  useEffect(() => {\n    const savedUser = localStorage.getItem('currentUser');\n    if (savedUser) {\n      try {\n        const user = JSON.parse(savedUser);\n        dispatch({ type: ACTIONS.LOGIN_SUCCESS, payload: user });\n      } catch (error) {\n        localStorage.removeItem('currentUser');\n      }\n    }\n  }, []);\n  \n  // Load user bookings when user logs in\n  useEffect(() => {\n    if (state.isAuthenticated && state.currentUser) {\n      loadBookingHistory();\n    }\n  }, [state.isAuthenticated, state.currentUser]);\n  \n  // Action creators\n  const login = async (email, password) => {\n    dispatch({ type: ACTIONS.LOGIN_START });\n    \n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Find user in mock data\n      const user = mockUsers.find(u => u.email === email);\n      \n      if (!user || password !== 'password123') { // Mock password for all users\n        throw new Error('Invalid email or password');\n      }\n      \n      // Save to localStorage\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      \n      dispatch({ type: ACTIONS.LOGIN_SUCCESS, payload: user });\n      \n      addNotification({\n        type: 'success',\n        message: `Welcome back, ${user.firstName}!`\n      });\n      \n      return user;\n    } catch (error) {\n      dispatch({ type: ACTIONS.LOGIN_FAILURE, payload: error.message });\n      addNotification({\n        type: 'error',\n        message: error.message\n      });\n      throw error;\n    }\n  };\n  \n  const logout = () => {\n    localStorage.removeItem('currentUser');\n    dispatch({ type: ACTIONS.LOGOUT });\n    addNotification({\n      type: 'success',\n      message: 'You have been logged out successfully'\n    });\n  };\n  \n  const searchTrips = async (searchParams) => {\n    dispatch({ type: ACTIONS.SEARCH_TRIPS_START });\n    \n    try {\n      const results = await mockApi.searchTrips(searchParams);\n      dispatch({ type: ACTIONS.SEARCH_TRIPS_SUCCESS, payload: results });\n      dispatch({ type: ACTIONS.SET_SEARCH_PARAMS, payload: searchParams });\n      return results;\n    } catch (error) {\n      dispatch({ type: ACTIONS.SEARCH_TRIPS_FAILURE, payload: error.message });\n      throw error;\n    }\n  };\n  \n  const loadAllTrips = async () => {\n    dispatch({ type: ACTIONS.SEARCH_TRIPS_START });\n    \n    try {\n      const results = await mockApi.getAllTrips();\n      dispatch({ type: ACTIONS.SEARCH_TRIPS_SUCCESS, payload: results });\n      dispatch({ type: ACTIONS.SET_SEARCH_PARAMS, payload: { origin: '', destination: '', date: '' } });\n      return results;\n    } catch (error) {\n      dispatch({ type: ACTIONS.SEARCH_TRIPS_FAILURE, payload: error.message });\n      throw error;\n    }\n  };\n  \n  const selectTrip = async (trip) => {\n    try {\n      const tripDetails = await mockApi.getTripDetails(trip.id);\n      dispatch({ type: ACTIONS.SELECT_TRIP, payload: tripDetails });\n      return tripDetails;\n    } catch (error) {\n      addNotification({\n        type: 'error',\n        message: 'Failed to load trip details'\n      });\n      throw error;\n    }\n  };\n  \n  const selectSeat = (seat) => {\n    dispatch({ type: ACTIONS.SELECT_SEAT, payload: seat });\n  };\n  \n  const createBooking = async (bookingData) => {\n    dispatch({ type: ACTIONS.CREATE_BOOKING_START });\n    \n    try {\n      const booking = await mockApi.createBooking(bookingData);\n      dispatch({ type: ACTIONS.CREATE_BOOKING_SUCCESS, payload: booking });\n      \n      addNotification({\n        type: 'success',\n        message: `Booking created successfully! Reference: ${booking.bookingReference}`\n      });\n      \n      return booking;\n    } catch (error) {\n      dispatch({ type: ACTIONS.CREATE_BOOKING_FAILURE, payload: error.message });\n      addNotification({\n        type: 'error',\n        message: 'Failed to create booking. Please try again.'\n      });\n      throw error;\n    }\n  };\n  \n  const processPayment = async (paymentData) => {\n    try {\n      const payment = await mockApi.processPayment(paymentData);\n      \n      if (payment.status === 'completed') {\n        addNotification({\n          type: 'success',\n          message: 'Payment completed successfully!'\n        });\n        \n        // Reload booking history\n        loadBookingHistory();\n      } else {\n        addNotification({\n          type: 'error',\n          message: payment.failureReason || 'Payment failed. Please try again.'\n        });\n      }\n      \n      return payment;\n    } catch (error) {\n      addNotification({\n        type: 'error',\n        message: 'Payment processing failed. Please try again.'\n      });\n      throw error;\n    }\n  };\n  \n  const loadBookingHistory = async () => {\n    if (!state.currentUser) return;\n    \n    try {\n      const bookings = await mockApi.getUserBookings(state.currentUser.id);\n      dispatch({ type: ACTIONS.LOAD_BOOKING_HISTORY, payload: bookings });\n    } catch (error) {\n      console.error('Failed to load booking history:', error);\n    }\n  };\n  \n  const addNotification = (notification) => {\n    const notificationWithId = { id: Date.now(), ...notification };\n    dispatch({ type: ACTIONS.ADD_NOTIFICATION, payload: notificationWithId });\n    \n    // Auto-remove notification after 5 seconds\n    setTimeout(() => {\n      dispatch({ type: ACTIONS.REMOVE_NOTIFICATION, payload: notificationWithId.id });\n    }, 5000);\n  };\n  \n  const removeNotification = (id) => {\n    dispatch({ type: ACTIONS.REMOVE_NOTIFICATION, payload: id });\n  };\n  \n  const clearError = () => {\n    dispatch({ type: ACTIONS.CLEAR_ERROR });\n  };\n  \n  const toggleSidebar = () => {\n    dispatch({ type: ACTIONS.TOGGLE_SIDEBAR });\n  };\n  \n  // Context value\n  const contextValue = {\n    // State\n    ...state,\n    \n    // Actions\n    login,\n    logout,\n    searchTrips,\n    loadAllTrips,\n    selectTrip,\n    selectSeat,\n    createBooking,\n    processPayment,\n    loadBookingHistory,\n    addNotification,\n    removeNotification,\n    clearError,\n    toggleSidebar\n  };\n  \n  return (\n    <AppContext.Provider value={contextValue}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\n// Custom hook to use context\nexport const useApp = () => {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n\nexport default AppContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}