{"ast":null,"code":"import _objectSpread from\"/Users/gohshunda/TWT-Transport-Booking/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// 路由分析API服务\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';// 请求助手函数\nconst apiCall=async function(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const baseUrl=process.env.REACT_APP_API_URL||'http://localhost:5001/api';const url=\"\".concat(baseUrl).concat(endpoint);const defaultOptions={method:'GET',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(localStorage.getItem('authToken'))}};const fetchOptions=_objectSpread(_objectSpread({},defaultOptions),options);try{console.log(\"API Call: \".concat(fetchOptions.method,\" \").concat(url));const response=await fetch(url,fetchOptions);if(!response.ok){const errorText=await response.text();console.error('API call failed:',errorText);let errorMessage=\"HTTP error! status: \".concat(response.status);try{const errorJson=JSON.parse(errorText);if(errorJson.message||errorJson.error){errorMessage=errorJson.message||errorJson.error;}}catch(e){if(errorText)errorMessage=errorText;}throw new Error(errorMessage);}const data=await response.json();return data;}catch(error){console.error('API call failed:',error);// 当API调用失败时使用模拟数据\nreturn generateMockData(endpoint,options);}};// 模拟数据处理函数 (API调用失败时使用)\nconst generateMockData=(endpoint,options)=>{console.warn('Using mock data fallback for:',endpoint);// 从URL中提取routeId\nconst routeIdMatch=endpoint.match(/\\/routes\\/([^\\/]+)/);const routeId=routeIdMatch?routeIdMatch[1]:null;if(endpoint.includes('occupancy')){return{success:true,data:{occupancyRate:85,totalTrips:12}};}if(endpoint.includes('travel-time')){const queryParams=new URLSearchParams(options.queryParams||{});const trafficFactor=parseFloat(queryParams.get('trafficFactor')||1.0);const weatherConditions=queryParams.get('weatherConditions')||'clear';let baseTravelTime=5.0;// 交通因素调整\nbaseTravelTime*=trafficFactor;// 天气调整\nconst weatherMultipliers={'clear':1.0,'light_rain':1.15,'heavy_rain':1.35,'fog':1.25,'storm':1.50};baseTravelTime*=weatherMultipliers[weatherConditions]||1.0;return{success:true,data:{travelTimeHours:parseFloat(baseTravelTime.toFixed(2)),baseTravelTimeHours:5.0,stopTimeHours:0.5,trafficFactor,weatherConditions,weatherMultiplier:weatherMultipliers[weatherConditions]||1.0}};}if(endpoint.includes('emissions')){const queryParams=new URLSearchParams(options.queryParams||{});const vehicleType=queryParams.get('vehicleType')||'standard';// 不同车型的排放系数\nconst emissionFactors={'standard':0.68,'luxury':0.85,'mini':0.45};const factor=emissionFactors[vehicleType]||0.68;// 假设平均距离为350km\nconst distance=350;const co2Emissions=distance*factor;return{success:true,data:{co2Emissions:parseFloat(co2Emissions.toFixed(2)),distanceKm:distance,vehicleType,emissionFactor:factor}};}if(endpoint.includes('dynamic-price')){const queryParams=new URLSearchParams(options.queryParams||{});const date=queryParams.get('date')||new Date().toISOString().split('T')[0];const availableSeats=parseInt(queryParams.get('availableSeats')||20);const totalSeats=parseInt(queryParams.get('totalSeats')||40);const basePrice=45.0;let dynamicPrice=basePrice;// 日期基础定价\nconst tripDate=new Date(date);const dayOfWeek=tripDate.getDay();const isWeekend=dayOfWeek===0||dayOfWeek===6;const isHoliday=false;if(isWeekend){dynamicPrice*=1.15;}if(isHoliday){dynamicPrice*=1.25;}// 基于需求的定价\nconst occupancyRate=1-availableSeats/totalSeats;if(occupancyRate>0.8){dynamicPrice*=1.20;}else if(occupancyRate>0.6){dynamicPrice*=1.10;}else if(occupancyRate<0.3){dynamicPrice*=0.90;}// 提前预订折扣\nconst now=new Date();const daysAdvance=Math.ceil((tripDate-now)/(1000*60*60*24));if(daysAdvance>14){dynamicPrice*=0.85;}else if(daysAdvance<2){dynamicPrice*=1.30;}const operationalCost=18.0;const profitMargin=0.25;const minPrice=operationalCost*(1+profitMargin);const finalPrice=Math.max(dynamicPrice,minPrice);return{success:true,data:{basePrice:basePrice,dynamicPrice:parseFloat(finalPrice.toFixed(2)),factors:{isWeekend,isHoliday,occupancyRate:parseFloat((occupancyRate*100).toFixed(1)),daysAdvance,operationalCost,minPrice:parseFloat(minPrice.toFixed(2))}}};}return{success:false,message:'No mock data available for this endpoint'};};// 导出API函数\nexport const calculateOccupancyRate=async trip=>{try{if(!trip||!trip.route||!trip.route.id){console.error('Invalid trip object provided to calculateOccupancyRate');return 0;}const routeId=trip.route.id;const response=await apiCall(\"/admin/routes/\".concat(routeId,\"/occupancy\"));if(response&&response.success&&response.data){return response.data.occupancyRate;}// 如果API调用失败或没有数据，计算单个行程的占用率\nif(trip.totalSeats&&trip.availableSeats){const occupiedSeats=trip.totalSeats-trip.availableSeats;return parseFloat((occupiedSeats/trip.totalSeats*100).toFixed(1));}return 0;}catch(error){console.error('Error calculating occupancy rate:',error);// 如果出错，使用静态计算\nif(trip.totalSeats&&trip.availableSeats){const occupiedSeats=trip.totalSeats-trip.availableSeats;return parseFloat((occupiedSeats/trip.totalSeats*100).toFixed(1));}return 0;}};export const calculateTravelTime=async function(route){let trafficFactor=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1.0;let weatherConditions=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'clear';try{if(!route||!route.id){console.error('Invalid route object provided to calculateTravelTime');return route.durationHours||0;}const params=new URLSearchParams({trafficFactor:trafficFactor.toString(),weatherConditions});const response=await apiCall(\"/admin/routes/\".concat(route.id,\"/travel-time?\").concat(params.toString()),{queryParams:params});if(response&&response.success&&response.data){return response.data.travelTimeHours;}// 如果API调用失败，使用路由中的基础时间\nreturn route.durationHours||0;}catch(error){console.error('Error calculating travel time:',error);// 如果出错，使用路由中的基础时间\nreturn route.durationHours||0;}};export const calculateCO2Emissions=async(route,vehicleType)=>{try{if(!route||!route.id){console.error('Invalid route object provided to calculateCO2Emissions');return route.distanceKm*0.68;// 默认排放系数\n}const vehicleTypeMap={'vt-1':'standard','vt-2':'luxury','vt-3':'mini'};const mappedVehicleType=vehicleTypeMap[vehicleType]||'standard';const params=new URLSearchParams({vehicleType:mappedVehicleType});const response=await apiCall(\"/admin/routes/\".concat(route.id,\"/emissions?\").concat(params.toString()),{queryParams:params});if(response&&response.success&&response.data){return response.data.co2Emissions;}// 如果API调用失败，使用静态计算\nconst emissionFactors={'vt-1':0.68,// 标准巴士\n'vt-2':0.85,// 豪华巴士\n'vt-3':0.45// 小型客车\n};const factor=emissionFactors[vehicleType]||0.68;return route.distanceKm*factor;}catch(error){console.error('Error calculating CO2 emissions:',error);// 如果出错，使用静态计算\nconst emissionFactors={'vt-1':0.68,'vt-2':0.85,'vt-3':0.45};const factor=emissionFactors[vehicleType]||0.68;return route.distanceKm*factor;}};export const calculateDynamicPrice=async(route,date,availableSeats,totalSeats)=>{try{if(!route||!route.id){console.error('Invalid route object provided to calculateDynamicPrice');return route.basePrice||0;}const formattedDate=date instanceof Date?date.toISOString().split('T')[0]:new Date().toISOString().split('T')[0];const params=new URLSearchParams({date:formattedDate,availableSeats:availableSeats.toString(),totalSeats:totalSeats.toString()});const response=await apiCall(\"/admin/routes/\".concat(route.id,\"/dynamic-price?\").concat(params.toString()),{queryParams:params});if(response&&response.success&&response.data){return response.data.dynamicPrice;}// 如果API调用失败，使用路由中的基础价格\nreturn route.basePrice||0;}catch(error){console.error('Error calculating dynamic price:',error);// 如果出错，使用路由中的基础价格\nreturn route.basePrice||0;}};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiCall","endpoint","options","arguments","length","undefined","baseUrl","url","concat","defaultOptions","method","headers","localStorage","getItem","fetchOptions","_objectSpread","console","log","response","fetch","ok","errorText","text","error","errorMessage","status","errorJson","JSON","parse","message","e","Error","data","json","generateMockData","warn","routeIdMatch","match","routeId","includes","success","occupancyRate","totalTrips","queryParams","URLSearchParams","trafficFactor","parseFloat","get","weatherConditions","baseTravelTime","weatherMultipliers","travelTimeHours","toFixed","baseTravelTimeHours","stopTimeHours","weatherMultiplier","vehicleType","emissionFactors","factor","distance","co2Emissions","distanceKm","emissionFactor","date","Date","toISOString","split","availableSeats","parseInt","totalSeats","basePrice","dynamicPrice","tripDate","dayOfWeek","getDay","isWeekend","isHoliday","now","daysAdvance","Math","ceil","operationalCost","profitMargin","minPrice","finalPrice","max","factors","calculateOccupancyRate","trip","route","id","occupiedSeats","calculateTravelTime","durationHours","params","toString","calculateCO2Emissions","vehicleTypeMap","mappedVehicleType","calculateDynamicPrice","formattedDate"],"sources":["/Users/gohshunda/TWT-Transport-Booking/src/services/routeAnalysisApi.js"],"sourcesContent":["// 路由分析API服务\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// 请求助手函数\nconst apiCall = async (endpoint, options = {}) => {\n  const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n  const url = `${baseUrl}${endpoint}`;\n  \n  const defaultOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n    }\n  };\n  \n  const fetchOptions = {\n    ...defaultOptions,\n    ...options,\n  };\n  \n  try {\n    console.log(`API Call: ${fetchOptions.method} ${url}`);\n    const response = await fetch(url, fetchOptions);\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('API call failed:', errorText);\n      \n      let errorMessage = `HTTP error! status: ${response.status}`;\n      try {\n        const errorJson = JSON.parse(errorText);\n        if (errorJson.message || errorJson.error) {\n          errorMessage = errorJson.message || errorJson.error;\n        }\n      } catch (e) {\n        if (errorText) errorMessage = errorText;\n      }\n      \n      throw new Error(errorMessage);\n    }\n    \n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('API call failed:', error);\n    // 当API调用失败时使用模拟数据\n    return generateMockData(endpoint, options);\n  }\n};\n\n// 模拟数据处理函数 (API调用失败时使用)\nconst generateMockData = (endpoint, options) => {\n  console.warn('Using mock data fallback for:', endpoint);\n  \n  // 从URL中提取routeId\n  const routeIdMatch = endpoint.match(/\\/routes\\/([^\\/]+)/);\n  const routeId = routeIdMatch ? routeIdMatch[1] : null;\n  \n  if (endpoint.includes('occupancy')) {\n    return {\n      success: true,\n      data: {\n        occupancyRate: 85,\n        totalTrips: 12\n      }\n    };\n  }\n  \n  if (endpoint.includes('travel-time')) {\n    const queryParams = new URLSearchParams(options.queryParams || {});\n    const trafficFactor = parseFloat(queryParams.get('trafficFactor') || 1.0);\n    const weatherConditions = queryParams.get('weatherConditions') || 'clear';\n    \n    let baseTravelTime = 5.0;\n    \n    // 交通因素调整\n    baseTravelTime *= trafficFactor;\n    \n    // 天气调整\n    const weatherMultipliers = {\n      'clear': 1.0,\n      'light_rain': 1.15,\n      'heavy_rain': 1.35,\n      'fog': 1.25,\n      'storm': 1.50\n    };\n    \n    baseTravelTime *= weatherMultipliers[weatherConditions] || 1.0;\n    \n    return {\n      success: true,\n      data: {\n        travelTimeHours: parseFloat(baseTravelTime.toFixed(2)),\n        baseTravelTimeHours: 5.0,\n        stopTimeHours: 0.5,\n        trafficFactor,\n        weatherConditions,\n        weatherMultiplier: weatherMultipliers[weatherConditions] || 1.0\n      }\n    };\n  }\n  \n  if (endpoint.includes('emissions')) {\n    const queryParams = new URLSearchParams(options.queryParams || {});\n    const vehicleType = queryParams.get('vehicleType') || 'standard';\n    \n    // 不同车型的排放系数\n    const emissionFactors = {\n      'standard': 0.68,\n      'luxury': 0.85,\n      'mini': 0.45\n    };\n    \n    const factor = emissionFactors[vehicleType] || 0.68;\n    // 假设平均距离为350km\n    const distance = 350;\n    const co2Emissions = distance * factor;\n    \n    return {\n      success: true,\n      data: {\n        co2Emissions: parseFloat(co2Emissions.toFixed(2)),\n        distanceKm: distance,\n        vehicleType,\n        emissionFactor: factor\n      }\n    };\n  }\n  \n  if (endpoint.includes('dynamic-price')) {\n    const queryParams = new URLSearchParams(options.queryParams || {});\n    const date = queryParams.get('date') || new Date().toISOString().split('T')[0];\n    const availableSeats = parseInt(queryParams.get('availableSeats') || 20);\n    const totalSeats = parseInt(queryParams.get('totalSeats') || 40);\n    \n    const basePrice = 45.0;\n    let dynamicPrice = basePrice;\n    \n    // 日期基础定价\n    const tripDate = new Date(date);\n    const dayOfWeek = tripDate.getDay();\n    const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;\n    const isHoliday = false;\n    \n    if (isWeekend) {\n      dynamicPrice *= 1.15;\n    }\n    \n    if (isHoliday) {\n      dynamicPrice *= 1.25;\n    }\n    \n    // 基于需求的定价\n    const occupancyRate = 1 - (availableSeats / totalSeats);\n    if (occupancyRate > 0.8) {\n      dynamicPrice *= 1.20;\n    } else if (occupancyRate > 0.6) {\n      dynamicPrice *= 1.10;\n    } else if (occupancyRate < 0.3) {\n      dynamicPrice *= 0.90;\n    }\n    \n    // 提前预订折扣\n    const now = new Date();\n    const daysAdvance = Math.ceil((tripDate - now) / (1000 * 60 * 60 * 24));\n    if (daysAdvance > 14) {\n      dynamicPrice *= 0.85;\n    } else if (daysAdvance < 2) {\n      dynamicPrice *= 1.30;\n    }\n    \n    const operationalCost = 18.0;\n    const profitMargin = 0.25;\n    const minPrice = operationalCost * (1 + profitMargin);\n    \n    const finalPrice = Math.max(dynamicPrice, minPrice);\n    \n    return {\n      success: true,\n      data: {\n        basePrice: basePrice,\n        dynamicPrice: parseFloat(finalPrice.toFixed(2)),\n        factors: {\n          isWeekend,\n          isHoliday,\n          occupancyRate: parseFloat((occupancyRate * 100).toFixed(1)),\n          daysAdvance,\n          operationalCost,\n          minPrice: parseFloat(minPrice.toFixed(2))\n        }\n      }\n    };\n  }\n  \n  return {\n    success: false,\n    message: 'No mock data available for this endpoint'\n  };\n};\n\n// 导出API函数\nexport const calculateOccupancyRate = async (trip) => {\n  try {\n    if (!trip || !trip.route || !trip.route.id) {\n      console.error('Invalid trip object provided to calculateOccupancyRate');\n      return 0;\n    }\n    \n    const routeId = trip.route.id;\n    const response = await apiCall(`/admin/routes/${routeId}/occupancy`);\n    \n    if (response && response.success && response.data) {\n      return response.data.occupancyRate;\n    }\n    \n    // 如果API调用失败或没有数据，计算单个行程的占用率\n    if (trip.totalSeats && trip.availableSeats) {\n      const occupiedSeats = trip.totalSeats - trip.availableSeats;\n      return parseFloat(((occupiedSeats / trip.totalSeats) * 100).toFixed(1));\n    }\n    \n    return 0;\n  } catch (error) {\n    console.error('Error calculating occupancy rate:', error);\n    // 如果出错，使用静态计算\n    if (trip.totalSeats && trip.availableSeats) {\n      const occupiedSeats = trip.totalSeats - trip.availableSeats;\n      return parseFloat(((occupiedSeats / trip.totalSeats) * 100).toFixed(1));\n    }\n    return 0;\n  }\n};\n\nexport const calculateTravelTime = async (route, trafficFactor = 1.0, weatherConditions = 'clear') => {\n  try {\n    if (!route || !route.id) {\n      console.error('Invalid route object provided to calculateTravelTime');\n      return route.durationHours || 0;\n    }\n    \n    const params = new URLSearchParams({\n      trafficFactor: trafficFactor.toString(),\n      weatherConditions\n    });\n    \n    const response = await apiCall(`/admin/routes/${route.id}/travel-time?${params.toString()}`, {\n      queryParams: params\n    });\n    \n    if (response && response.success && response.data) {\n      return response.data.travelTimeHours;\n    }\n    \n    // 如果API调用失败，使用路由中的基础时间\n    return route.durationHours || 0;\n  } catch (error) {\n    console.error('Error calculating travel time:', error);\n    // 如果出错，使用路由中的基础时间\n    return route.durationHours || 0;\n  }\n};\n\nexport const calculateCO2Emissions = async (route, vehicleType) => {\n  try {\n    if (!route || !route.id) {\n      console.error('Invalid route object provided to calculateCO2Emissions');\n      return route.distanceKm * 0.68; // 默认排放系数\n    }\n    \n    const vehicleTypeMap = {\n      'vt-1': 'standard',\n      'vt-2': 'luxury',\n      'vt-3': 'mini'\n    };\n    \n    const mappedVehicleType = vehicleTypeMap[vehicleType] || 'standard';\n    \n    const params = new URLSearchParams({\n      vehicleType: mappedVehicleType\n    });\n    \n    const response = await apiCall(`/admin/routes/${route.id}/emissions?${params.toString()}`, {\n      queryParams: params\n    });\n    \n    if (response && response.success && response.data) {\n      return response.data.co2Emissions;\n    }\n    \n    // 如果API调用失败，使用静态计算\n    const emissionFactors = {\n      'vt-1': 0.68, // 标准巴士\n      'vt-2': 0.85, // 豪华巴士\n      'vt-3': 0.45  // 小型客车\n    };\n    \n    const factor = emissionFactors[vehicleType] || 0.68;\n    return route.distanceKm * factor;\n  } catch (error) {\n    console.error('Error calculating CO2 emissions:', error);\n    // 如果出错，使用静态计算\n    const emissionFactors = {\n      'vt-1': 0.68,\n      'vt-2': 0.85,\n      'vt-3': 0.45\n    };\n    \n    const factor = emissionFactors[vehicleType] || 0.68;\n    return route.distanceKm * factor;\n  }\n};\n\nexport const calculateDynamicPrice = async (route, date, availableSeats, totalSeats) => {\n  try {\n    if (!route || !route.id) {\n      console.error('Invalid route object provided to calculateDynamicPrice');\n      return route.basePrice || 0;\n    }\n    \n    const formattedDate = date instanceof Date \n      ? date.toISOString().split('T')[0]\n      : new Date().toISOString().split('T')[0];\n    \n    const params = new URLSearchParams({\n      date: formattedDate,\n      availableSeats: availableSeats.toString(),\n      totalSeats: totalSeats.toString()\n    });\n    \n    const response = await apiCall(`/admin/routes/${route.id}/dynamic-price?${params.toString()}`, {\n      queryParams: params\n    });\n    \n    if (response && response.success && response.data) {\n      return response.data.dynamicPrice;\n    }\n    \n    // 如果API调用失败，使用路由中的基础价格\n    return route.basePrice || 0;\n  } catch (error) {\n    console.error('Error calculating dynamic price:', error);\n    // 如果出错，使用路由中的基础价格\n    return route.basePrice || 0;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}